<?php

namespace Zend\ServiceManager\Proxy\__CG__;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Mock_stdClass_9bf5282d extends \Mock_stdClass_9bf5282d implements \Doctrine\Common\Proxy\Proxy
{
    /**
     * @var Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var Closure the callback responsible of loading properties that need to be copied in the cloned object
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var bool flag indicating if this object was already initialized
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array public properties to be lazy loaded (with their default values)
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyLoadedPublicProperties
     */
    public static $lazyPublicPropertiesDefaultValues = array();


    /**
     * @var object wrapped object to which method calls will be forwarded
     */
     public $__wrappedObject__;

    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer, $cloner)
    {
        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     *
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '__phpunit_staticInvocationMocker', '__phpunit_invocationMocker');
        }

        return array('__isInitialized__', '__phpunit_staticInvocationMocker', '__phpunit_invocationMocker');
    }

    /**
     *
     */
    public function __wakeup()
    {

        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function(Mock_stdClass_9bf5282d $proxy){
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);
                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyLoadedPublicProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };
        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        if($this->__cloner__) {
            $cb = $this->__cloner__;
            $cb($this, '__clone', array());
        }
        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     * @private
     */
    public function __load()
    {
        if ($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb( $this, '__load', array());
        }
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @private
     */
    public function __getLazyLoadedPublicProperties()
    {
        return self::$lazyPublicPropertiesDefaultValues;
    }

    
    /**
     * {@inheritDoc}
     */
    public function expects(\PHPUnit_Framework_MockObject_Matcher_Invocation $matcher)
    {
        if($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb($this, 'expects', array($matcher));
        }

        return $this->__wrappedObject__->expects($matcher);
    }

    /**
     * {@inheritDoc}
     */
    public function __phpunit_getInvocationMocker()
    {
        if($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb($this, '__phpunit_getInvocationMocker', array());
        }

        return $this->__wrappedObject__->__phpunit_getInvocationMocker();
    }

    /**
     * {@inheritDoc}
     */
    public function __phpunit_hasMatchers()
    {
        if($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb($this, '__phpunit_hasMatchers', array());
        }

        return $this->__wrappedObject__->__phpunit_hasMatchers();
    }

    /**
     * {@inheritDoc}
     */
    public function __phpunit_verify()
    {
        if($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb($this, '__phpunit_verify', array());
        }

        return $this->__wrappedObject__->__phpunit_verify();
    }

    /**
     * {@inheritDoc}
     */
    public function __phpunit_cleanup()
    {
        if($this->__initializer__) {
            $cb = $this->__initializer__;
            $cb($this, '__phpunit_cleanup', array());
        }

        return $this->__wrappedObject__->__phpunit_cleanup();
    }

}
