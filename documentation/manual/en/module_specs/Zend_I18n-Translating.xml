<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xml:id="zend.i18n.translating">
    <title>Translating</title>

    <para>
        Zend_I18n comes with a complete translation suite which supports all
        major formats and includes popular features like plural translations
        and text domains. The Translator component is mostly dependency free,
        except for the fallback to a default locale, where it relies on the
        Intl PHP extension.
    </para>

    <para>
        The translator itself is initialized without any parameters, as any
        configuration to it is optional. A translator without any translations
        will actually do nothing but just return the given message IDs.
    </para>

    <section xml:id="zend.i18n.translating.adding-translations">
        <title>Adding translations</title>

        <para>
            To add translations to the translator, there are two options. You
            can either add every translation file individually, which is the
            best way if you use translation formats which store multiple locales
            in the same file, or you can add translations via a pattern, which
            works best for formats which contain one locale per file.
        </para>

        <para>
            To add a single file to the translator, use the
            <methodname>addTranslationFile()</methodname> method:
        </para>

        <programlisting language="php"><![CDATA[
use Zend\I18n\Translator\Translator;

$translator = new Translator();
$translator->addTranslationFile($type, $filename, $textDomain, $locale);
]]></programlisting>

        <para>
            The type given there is a name of one of the format loaders listed in
            the next section. Filename points to the file containing the file
            containing the translations and the text domain specifies a category
            name for the translations. If the text domain is omitted, it will
            default to the &quot;default&quot; value. The locale specifies which
            language the translated strings are from and is only required for
            formats which contain translations for a single locale.
        </para>

        <note>
            <para>
                For each text domain and locale combination, there can only be
                one file loaded. Every successive file would override the
                translations which were loaded prior.
            </para>
        </note>

        <para>
            When storing one locale per file, you should specify those files via
            a pattern. This allows you to add new translations to the file
            system, without touching your code. Patterns are added with the
            <methodname>addTranslationPattern()</methodname> method:
        </para>

        <programlisting language="php"><![CDATA[
use Zend\I18n\Translator\Translator;

$translator = new Translator();
$translator->addTranslationPattern($type, $pattern, $textDomain);
]]></programlisting>

        <para>
            The parameters for adding patterns is pretty similar to adding
            individual files, except that don't specify a locale and give the
            file location as sprtinf pattern. The locale is passed to the
            sprintf call, so you can either use %s oder %1$s where it should be
            substituted. So when youf translation files are located in
            /var/messages/LOCALE/messages.mo, you would specify your pattern as
            /var/messages/%s/messages.mo.
        </para>
    </section>

    <section xml:id="zend.i18n.translating.supported-formats">
        <title>Supported formats</title>

        <para>
            The translator supports the following major translation formats:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    PHP arrays
                </para>
            </listitem>

            <listitem>
                <para>
                    Gettext
                </para>
            </listitem>

            <listitem>
                <para>
                    Tmx
                </para>
            </listitem>

            <listitem>
                <para>
                    Xliff
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="zend.i18n.translating.setting-a-locale">
        <title>Setting a locale</title>

        <para>
            By default, the translator will get the locale to use from the
            Intl extension's <classname>Locale</classname> class. If you want
            to set an alternative locale explicitly, you can do so by passing
            it to the <methodname>setLocale()</methodname> method.
        </para>

        <para>
            When there is not translation for a specific message ID in a locale,
            the message ID itself will be returned by default. Alternatively you
            can set a fallback locale which is used to retrieve a fallback
            translation. To do so, pass it to the
            <methodname>setFallbackLocale()</methodname> method.
        </para>
    </section>

    <section xml:id="zend.i18n.translating.translating-messages">
        <title>Translating messages</title>

        <para>
            Translating messages can accomplished by calling the
            <methodname>translate()</methodname> method of the translator:
        </para>

        <programlisting language="php"><![CDATA[
$translator->translate($message, $textDomain, $locale);
]]></programlisting>

        <para>
            The message is the ID of your message to translate. If it does not
            exist in the loader translations or is empty, the original message
            ID will be returned. The text domain parameter is the one you
            specified when adding translations. If omitted, the default text
            domain will be used. The locale parameter will usually not be used
            in this context, as by default the locale is taken from the locale
            set in the translator.
        </para>

        <para>
            To translate plural messages, you can use the
            <methodname>translatePlural()</methodname> method. It works similar
            to <methodname>translate()</methodname>, but instead of a single
            messages it takes a singluar and a plural value and an additional
            integer number on which the returned plural form is based on:
        </para>

        <programlisting language="php"><![CDATA[
$translator->translatePlural($singular, $plural, $number, $textDomain, $locale);
]]></programlisting>

        <para>
            Plural translations are only available if the underlying format
            supports the transport of plural messages and plural rule
            definitions.
        </para>
    </section>

    <section xml:id="zend.i18n.translating.caching">
        <title>Caching</title>

        <para>
            In production it makes sense to cache your translations. This not
            only saves you from loading and parsing the individual formats each
            time, but also guarantees an optimized loading procedure. To enable
            caching, simply pass a
            <classname>Zend\Cache\Storage\Adapter</classname> to the
            <methodname>setCache()</method> method. To disable the cache, you
            can just pass a null value to it.
        </para>
    </section>
</section>
