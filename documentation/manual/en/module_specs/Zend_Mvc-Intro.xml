<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.mvc.intro">
  <title>Introduction to the MVC Layer</title>

  <para>
    <classname>Zend\Mvc</classname> is a brand new MVC implementation
    designed from the ground up for Zend Framework 2.0. The focus of
    this implementation is performance and flexibility.
  </para>

  <para>
    The MVC layer is built on top of the following components:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <classname>Zend\ServiceManager</classname>. Zend Framework provides a
        set of default service definitions to use in order to create and
        configure your application instance and workflow.
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\EventManager</classname>, which is used everywhere from
        initial bootstrapping of the application to returning the response; the
        MVC is event driven.
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Http</classname>, specifically the request and response
        objects, which are used with:
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Stdlib\DispatchableInterface</classname>; all
        "controllers" are simply dispatchable objects
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Within the MVC layer, several subcomponents are exposed:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <classname>Zend\Mvc\Router</classname> contains classes pertaining to
        routing a request (the act of matching a request to a controller,
        or dispatchable)
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\PhpEnvironment</classname>, a set of decorators for
        the HTTP <classname>Request</classname> and <classname>Response</classname>
        objects that ensure the request is injected with the current
        environment (including query parameters, POST parameters, HTTP
        headers, etc.)
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\Controller</classname>, a set of abstract
        "controller" classes with basic responsibilities such as
        event wiring, action dispatching, etc.
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\Service</classname>, which provides a set of
        <classname>ServiceManager</classname> factories and definitions for the
        default application workflow.
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\View\Http</classname>, which provides the default
        wiring for renderer selection, view script resolution, helper
        registration, and more; additionally, it provides a number of
        listeners that tie into the MVC workflow to provide features such as
        automated template name resolution, automated view model creation
        and injection, and more.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    The gateway to the MVC is the
    <classname>Zend\Mvc\Application</classname> object (referred to simply as
    <classname>Application</classname> from this point forward). Its primary
    responsibilities are to <emphasis>bootstrap</emphasis> resources,
    <emphasis>route</emphasis> the request, and to retrieve and
    <emphasis>dispatch</emphasis> the controller discovered. Once accomplished,
    it returns a response, which can then be <emphasis>sent</emphasis>.
  </para>

  <section xml:id="zend.mvc.intro.basic-application-structure">
    <title>Basic Application Structure</title>

    <para>
      The basic structure of an application is as follows:
    </para>

    <literallayout>
application_root/
    config/
        application.php
        autoload/
            global.php
            local.php
            // etc.
    data/
    module/
    vendor/
    public/
        .htaccess
        index.php
</literallayout>

    <para>
      The <filename>public/index.php</filename> performs the basic work of
      martialling configuration and configuring the
      <classname>Application</classname>. Once done, it
      <methodname>run()</methodname>s the <classname>Application</classname> and
      <methodname>send()</methodname>s the response returned.
    </para>

    <para>
      The <filename>config</filename> directory will typically contain
      configuration used by <classname>Zend\Module\Manager</classname> in
      order to load modules and merge configuration; we will detail this
      more later.
    </para>

    <para>
      The <filename>vendor</filename> subdirectory should contain any
      third-party modules or libraries on which your application depends. This
      might include Zend Framework, custom libraries from your organization, or
      other third-party libraries from other projects. Libraries and modules
      placed in the <filename>vendor</filename> subdirectory should not be
      modified from their original, distributed state.
    </para>

    <para>
      Finally, the <filename>module</filename> directory will contain one
      or more modules delivering your application's functionality.
    </para>

    <para>
      Let's now turn to modules, as they are the basic units of a web
      application.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.basic-module-structure">
    <title>Basic Module Structure</title>

    <para>
      A module may contain just about anything: PHP code, including MVC
      functionality; library code; view scripts; and/or or public assets
      such as images, CSS, and JavaScript. The one requirement -- and
      even this is optional -- is that a module acts as a PHP namespace
      and that it contains a <classname>Module</classname> class under that
      namespace. This class will then be consumed by
      <classname>Zend\Module\Manager</classname> in order to perform a number
      of tasks.
    </para>

    <para>
      The recommended structure of a module is as follows:
    </para>

    <literallayout>
module_root/
    Module.php
    autoload_classmap.php
    autoload_function.php
    autoload_register.php
    config/
        module.config.php
    public/
        images/
        css/
        js/
    src/
        &lt;module_namespace&gt;/
            &lt;code files&gt;
    test/
        phpunit.xml
        bootstrap.php
        &lt;module_namespace&gt;/
            &lt;test code files&gt;
    view/
        &lt;dir-named-after-module-namespace&gt;/
            &lt;dir-named-after-a-controller&gt;/
                &lt;.phtml files&gt;
</literallayout>

    <para>
      Since a module acts as a namespace, the module root directory
      should be that namespace. Typically, this namespace will also
      include a vendor prefix of sorts. As an example a module centered
      around "User" functionality delivered by Zend might be
      named "ZendUser", and this is also what the module root
      directory will be named.
    </para>

    <para>
      The <filename>Module.php</filename> file directly under the module
      root directory will be in the module namespace.
    </para>

    <programlisting language="php"><![CDATA[
namespace ZendUser;

class Module
{
}
]]></programlisting>

    <para>
      By default, if an <methodname>init()</methodname> method is defined, this
      method will be triggered by a <classname>Zend\Module\Manager</classname>
      listener when it loads the module class, and passed an instance of the
      manager. This allows you to perform tasks such as setting up
      module-specific event listeners. The <methodname>init()</methodname>
      method is called for <emphasis>every</emphasis> module on
      <emphasis>every</emphasis> page request and should
      <emphasis>only</emphasis> be used for performing
      <emphasis>lightweight</emphasis> tasks such as registering event
      listeners. Similarly, an <methodname>onBootstrap()</methodname> method
      (which accepts an <classname>MvcEvent</classname> instance) may be
      defined; it will be triggered for every page request, and should be used
      for lightweight tasks only.
    </para>

    <para>
      The three <filename>autoload_*.php</filename> files are not
      required, but recommended. They provide the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <filename>autoload_classmap.php</filename> should return an array
          classmap of class name/filename pairs (with the filenames resolved
          via the <varname>__DIR__</varname> magic constant).
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>autoload_function.php</filename> should return a PHP
          callback that can be passed to
          <methodname>spl_autoload_register()</methodname>. Typically, this
          callback should utilize the map returned by
          <filename>autoload_filemap.php</filename>.
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>autoload_register.php</filename> should register a PHP
          callback (typically that returned by
          <filename>autoload_function.php</filename> with
          <methodname>spl_autoload_register()</methodname>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The point of these three files is to provide reasonable default
      mechanisms for autoloading the classes contained in the module,
      thus providing a trivial way to consume the module without
      requiring <classname>Zend\Module</classname> (e.g., for use outside a
      ZF2 application).
    </para>

    <para>
      The <filename>config</filename> directory should contain any
      module-specific configuration. These files may be in any format
      <classname>Zend\Config</classname> supports. We recommend naming the main
      configuration "module.format", and for PHP-based configuration,
      "module.config.php". Typically, you will create configuration for the
      router as well as for the dependency injector.
    </para>

    <para>
      The <filename>src</filename> directory should be a
      <link xlink:href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0 compliant directory structure</link>
      with your module's source code. Typically, you should at least have
      one subdirectory named after your module namespace; however, you
      can ship code from multiple namespaces if desired.
    </para>

    <para>
      The <filename>test</filename> directory should contain your unit
      tests. Typically, these will be written using
      <link xlink:href="http://phpunit.de">PHPUnit</link>, and contain
      artifacts related to its configuration (e.g.,
      <filename>phpunit.xml</filename>, <filename>bootstrap.php</filename>).
    </para>

    <para>
      The <filename>public</filename> directory can be used for assets that
      you may want to expose in your application's document root. These
      might include images, CSS files, JavaScript files, etc. How these
      are exposed is left to the developer.
    </para>

    <para>
      The <filename>view</filename> directory contains view scripts related to your
      controllers.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.bootstrapping-an-application">
    <title>Bootstrapping an Application</title>

    <para>
        The <classname>Application</classname> has six basic dependencies.
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis role="strong">configuration</emphasis>, usually an
                array or object implementing <classname>ArrayAccess</classname>.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">ServiceManager</emphasis> instance.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">EventManager</emphasis> instance, which,
                by default, is pulled from the
                <classname>ServiceManager</classname>, by the service name
                "EventManager".
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">ModuleManager</emphasis> instance, which,
                by default, is pulled from the
                <classname>ServiceManager</classname>, by the service name
                "ModuleManager".
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Request</emphasis> instance, which,
                by default, is pulled from the
                <classname>ServiceManager</classname>, by the service name
                "Request".
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Response</emphasis> instance, which,
                by default, is pulled from the
                <classname>ServiceManager</classname>, by the service name
                "Response".
            </para>
        </listitem>
    </itemizedlist>

    <para>
        These may be satisfied at instantiation:
    </para>

    <programlisting language="php"><![CDATA[
use Zend\EventManager\EventManager;
use Zend\Http\PhpEnvironment;
use Zend\ModuleManager\ModuleManager;
use Zend\Mvc\Application;
use Zend\ServiceManager\ServiceManager;

$config = include 'config/application.php';

$serviceManager = new ServiceManager();
$serviceManager->setService('EventManager', new EventManager());
$serviceManager->setService('ModuleManager', new ModuleManager());
$serviceManager->setService('Request', new PhpEnvironment\Request());
$serviceManager->setService('Response', new PhpEnvironment\Response());

$application = new Application($config, $serviceManager);
]]></programlisting>

    <para>
      Once you've done this, there are two additional actions you can take. The
      first is to "bootstrap" the application. In the default implementation,
      this does the following:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                Attaches the default route listener
                (<classname>Zend\Mvc\RouteListener</classname>).
            </para>
        </listitem>

        <listitem>
            <para>
                Attaches the default dispatch listener
                (<classname>Zend\Mvc\DispatchListener</classname>).
            </para>
        </listitem>

        <listitem>
            <para>
                Attaches the <classname>ViewManager</classname> listener
                (<classname>Zend\Mvc\View\Http\ViewManager</classname>).
            </para>
        </listitem>

        <listitem>
            <para>
                Creates the <classname>MvcEvent</classname>, and injects it with
                the application, request, and response; it also retrieves the
                router (<classname>Zend\Mvc\Router\Http\TreeRouteStack</classname>)
                at this time and attaches it to the event.
            </para>
        </listitem>

        <listitem>
            <para>
                Triggers the "bootstrap" event.
            </para>
        </listitem>
    </itemizedlist>

    <para>
      If you do not want these actions, or want to provide alternatives, you can
      do so by extending the <classname>Application</classname> class and/or
      simply coding what actions you want to occur.
    </para>

    <para>
      The second action you can take with the configured
      <classname>Application</classname> is to <methodname>run()</methodname>
      it. Calling this method simply does the following: it triggers the
      "route" event, followed by the "dispatch" event, and, depending on
      execution, the "render" event; when done, it triggers the "finish"
      event, and then returns the response instance. If an error occurs during
      either the "route" or "dispatch" event, a "dispatch.error" event is
      triggered as well.
    </para>

    <para>
      This is a lot to remember in order to bootstrap the application; in fact,
      we haven't covered all the services available by default yet. You can
      greatly simplify things by using the default
      <classname>ServiceManager</classname> configuration shipped with the MVC.
    </para>

    <programlisting language="php"><![CDATA[
use Zend\Loader\AutoloaderFactory;
use Zend\Mvc\Service\ServiceManagerConfiguration;
use Zend\ServiceManager\ServiceManager;

// setup autoloader
AutoloaderFactory::factory();

// get application stack configuration
$configuration = include 'config/application.config.php';

// setup service manager
$serviceManager = new ServiceManager(new ServiceManagerConfiguration());
$serviceManager->setService('ApplicationConfiguration', $configuration);

// load modules -- which will provide services, configuration, and more
$serviceManager->get('ModuleManager')->loadModules();

// bootstrap and run application
$application = $serviceManager->get('Application');
$application->bootstrap();
$response = $application->run();
$response->send();
]]></programlisting>

    <para>
      You'll note that you have a great amount of control over the workflow.
      Using the <classname>ServiceManager</classname>, you have fine-grained
      control over what services are available, how they are instantiated, and
      what dependencies are injected into them. Using the
      <classname>EventManager</classname>'s priority system, you can intercept
      any of the application events ("bootstrap", "route", "dispatch",
      "dispatch.error", "render", and "finish") anywhere during execution,
      allowing you to craft your own application workflows as needed.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.bootstrapping-a-modular-application">
    <title>Bootstrapping a Modular Application</title>

    <para>
      While the previous approach largely works, where does the
      configuration come from? When we create a modular application, the
      assumption will be that it's from the modules themselves. How do we
      get that information and aggregate it, then?
    </para>

    <para>
      The answer is via <classname>Zend\ModuleManager\ModuleManager</classname>. This
      component allows you to specify where modules exist, and it will
      then locate each module and initialize it. Module classes can tie into
      various listeners on the <classname>ModuleManager</classname> in order to
      provide configuration, services, listeners, and more to the application.
      Sound complicated? It's not.
    </para>

    <section xml:id="zend.mvc.intro.bootstrapping-a-modular-application.configuring-the-module-manager">
      <title>Configuring the Module Manager</title>

      <para>
          The first step is configuring the module manager.  You simply inform
          the module manager which modules to load, and potentially provide
          configuration for the module listeners.
      </para>

      <para>
        Remember the <filename>application.php</filename> from earlier? We're
        going to provide some configuration.
      </para>

      <programlisting language="php"><![CDATA[
<?php
// config/application.php
return array(
    'modules' => array(
        /* ... */
    ),
    'module_listener_options' => array( 
        'module_paths' => array(
            './module',
            './vendor',
        ),
    ),
);
]]></programlisting>

      <para>
        As we add modules to the system, we'll add items to the
        <varname>modules</varname> array.
      </para>

      <para>
        Each <classname>Module</classname> class that has configuration it wants
        the <classname>Application</classname> to know about should define a
        <methodname>getConfig()</methodname> method. That method should return
        an array or <classname>Traversable</classname> object such as
        <classname>Zend\Config\Config</classname>. As an example:
      </para>

      <programlisting language="php"><![CDATA[
namespace ZendUser;

class Module
{
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php'
    }
}
]]></programlisting>

      <para>
        There are a number of other methods you can define for tasks ranging
        from providing autoloader configuration, to providing services to the
        <classname>ServiceManager</classname>, to listening to the bootstrap
        event. The ModuleManager documentation goes into more detail on these.
      </para>
    </section>
  </section>

  <section xml:id="zend.mvc.intro.conclusion">
    <title>Conclusion</title>

    <para>
      The ZF2 MVC layer is incredibly flexible, offering an opt-in, easy to
      create modular infrastructure, as well as the ability to craft your own
      application workflows via the <classname>ServiceManager</classname> and
      <classname>EventManager</classname>.  The module manager is a lightweight
      and simple approach to enforcing a modular architecture that encourages
      clean separation of concerns and code re-use.
    </para>
  </section>
</section>
