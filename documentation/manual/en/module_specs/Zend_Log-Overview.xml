<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.log.overview"><info><title>Overview</title></info>
    

    <para>
        <classname>Zend\Log\Logger</classname> is a component for general purpose logging.
        It supports multiple log backends, formatting messages sent to the log,
        and filtering messages from being logged. These functions are divided
        into the following objects:
    </para>
    
        <itemizedlist>
            <listitem>
                <para>
                    A Logger (instance of <classname>Zend\Log\Logger</classname>) is the object that your
                    application uses the most. You can have as many Logger objects as you
                    like; they do not interact. A Logger object must contain at
                    least one Writer, and can optionally contain one or more Filters.
                </para>
            </listitem>

            <listitem>
                <para>
                    A Writer (inherits from <classname>Zend\Log\Writer\AbstractWriter</classname>) is
                    responsible for saving data to storage.
                </para>
            </listitem>

            <listitem>
                <para>
                    A Filter (implements <classname>Zend\Log\Filter</classname>)
                    blocks log data from being saved. A filter may be applied to an
                    individual Writer, or to a Logger where it is applied before all
                    Writers. In either case, filters may be chained.
                </para>
            </listitem>

            <listitem>
                <para>
                    A Formatter (inherits from <classname>Zend\Log\Formatter\AbstractFormatter</classname>)
                    can format the log data before it is written by a Writer. Each
                    Writer has exactly one Formatter.
                </para>
            </listitem>
        </itemizedlist>

    <section xml:id="zend.log.overview.creating-a-logger"><info><title>Creating a Log</title></info>

        <para>
            To get started logging, instantiate a Writer and then pass it to a Logger instance:
        </para>

        <programlisting language="php"><![CDATA[
$logger = new Zend\Log\Logger;
$writer = new Zend\Log\Writer\Stream('php://output');

$logger->addWriter($writer);
]]></programlisting>

        <para>
            It is important to note that the Logger must
            have at least one Writer. You can add any number of Writers using the
            Log's <methodname>addWriter()</methodname> method.
        </para>
    </section>

    <section xml:id="zend.log.overview.logging-messages"><info><title>Logging Messages</title></info>
        

        <para>
            To log a message, call the <methodname>log()</methodname> method of a Log instance
            and pass it the message with a corresponding priority:
        </para>

        <programlisting language="php"><![CDATA[
$logger->log(Zend\Log\Logger::INFO, 'Informational message');
]]></programlisting>

        <para>
            The first parameter of the <methodname>log()</methodname> method is an integer
            <property>priority</property> and the second paramter is a string
            <property>message</property> . The priority must be one of the priorities recognized by
            the Logger instance. This is explained in the next section.
        </para>

        <para>
            A shortcut is also available. Instead of calling the <methodname>log()</methodname>
            method, you can call a method by the same name as the priority:
        </para>

        <programlisting language="php"><![CDATA[
$logger->log(Zend\Log\Logger::INFO, 'Informational message');
$logger->info('Informational message');

$logger->log(Zend\Log\Logger::EMERG, 'Emergency message');
$logger->emerg('Emergency message');
]]></programlisting>

    </section>

    <section xml:id="zend.log.overview.destroying-a-logger"><info><title>Destroying a Log</title></info>
        

        <para>
            If the Logger object is no longer needed, set the variable containing it to
            <constant>NULL</constant> to destroy it. This will automatically call the
            <methodname>shutdown()</methodname> instance method of each attached Writer before
            the Log object is destroyed:
        </para>

        <programlisting language="php"><![CDATA[
$logger = null;
]]></programlisting>

        <para>
            Explicitly destroying the log in this way is optional and is performed
            automatically at <acronym>PHP</acronym> shutdown.
        </para>
    </section>

    <section xml:id="zend.log.overview.builtin-priorities"><info><title>Using Built-in Priorities</title></info>
        

        <para>
            The <classname>Zend\Log\Logger</classname> class defines the following priorities:
        </para>

        <programlisting language="php"><![CDATA[
EMERG   = 0;  // Emergency: system is unusable
ALERT   = 1;  // Alert: action must be taken immediately
CRIT    = 2;  // Critical: critical conditions
ERR     = 3;  // Error: error conditions
WARN    = 4;  // Warning: warning conditions
NOTICE  = 5;  // Notice: normal but significant condition
INFO    = 6;  // Informational: informational messages
DEBUG   = 7;  // Debug: debug messages
]]></programlisting>

        <para>
            These priorities are always available, and a convenience method of the same name
            is available for each one.
        </para>

        <para>
            The priorities are not arbitrary. They come from the BSD syslog protocol,
            which is described in <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tools.ietf.org/html/rfc3164">RFC-3164</link>.
            The names and corresponding priority numbers are also
            compatible with another <acronym>PHP</acronym> logging system,
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pear.php.net/package/log">PEAR Log</link>,
            which perhaps promotes interoperability between it and <classname>Zend\Log\Logger</classname>.
        </para>

        <para>
            Priority numbers descend in order of importance. <constant>EMERG</constant> (0)
            is the most important priority. <constant>DEBUG</constant> (7) is the least
            important priority of the built-in priorities. You may define priorities
            of lower importance than <constant>DEBUG</constant>. When
            selecting the priority for your log message, be aware of this priority
            hierarchy and choose appropriately.
        </para>
    </section>

    <section xml:id="zend.log.overview.understanding-fields"><info><title>Understanding Log Events</title></info>
        
        <para>
            When you call the <methodname>log()</methodname> method or one of its shortcuts, a
            log event is created. This is simply an associative array with data
            describing the event that is passed to the writers. The following keys
            are always created in this array: <property>timestamp</property>,
            <property>message</property>, <property>priority</property>, and
            <property>priorityName</property>.
        </para>

        <para>
            The creation of the <property>event</property> array is completely transparent.
        </para>

    </section>

    <section xml:id="zend.log.overview.as-errorHandler"><info><title>Log PHP Errors</title></info>
        

        <para>
            <classname>Zend\Log\Logger</classname> can also be used to log <acronym>PHP</acronym> errors
            and intercept Exceptions.
            Calling the static method <methodname>registerErrorHandler($logger)</methodname> will add the
            $logger object before the current PHP error handler, 
            and will pass the error along as well.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Log\Logger,
    Zend\Log\Writer\Stream as StreamWriter;
    
$logger = new Logger;
$writer = new StreamWriter('php://output');
$logger->addWriter($writer);

Logger::registerErrorHandler($this->logger);
]]></programlisting>

        <para>
            If you want to unregister the error handler you can use the 
            <methodname>unregisterErrorHandler()</methodname> static method.
        </para>
        
        <table xml:id="zend.log.overview.as-errorHandler.properties.table">
            <info><title>
                Zend\Log\Logger events from PHP errors fields matching
                <methodname>handler  ( int $errno  , string $errstr  [, string $errfile  [, int
                    $errline  [, array $errcontext  ]]] )</methodname> from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://us3.php.net/manual/en/function.set-error-handler.php">set_error_handler</link>
            </title></info>
            

            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Error Handler Paramater</entry>
                        <entry>Description</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>message</entry>
                        <entry>errstr</entry>
                        <entry>Contains the error message, as a string.</entry>
                    </row>

                    <row>
                        <entry>errno</entry>
                        <entry>errno</entry>
                        <entry>Contains the level of the error raised, as an integer.</entry>
                    </row>

                    <row>
                        <entry>file</entry>
                        <entry>errfile</entry>
                        <entry>
                            Contains the filename that the error was raised in, as a string.
                        </entry>
                    </row>

                    <row>
                        <entry>line</entry>
                        <entry>errline</entry>
                        <entry>
                            Contains the line number the error was raised at, as an integer.
                        </entry>
                    </row>

                    <row>
                        <entry>context</entry>
                        <entry>errcontext</entry>
                        <entry>
                            (optional) An array that points to the active symbol table at the point
                            the error occurred. In other words, errcontext  will contain an array of
                            every variable that existed in the scope the error was triggered in.
                            User error handler must not modify error context.
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        
        <para>
            You can also configure a Logger to intercept Exceptions using the static method
            <methodname>registerExceptionHandler($logger)</methodname>.
        </para>
    </section>
</section>
