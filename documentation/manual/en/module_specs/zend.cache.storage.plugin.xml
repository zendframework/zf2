<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.cache.storage.plugin">
    <info>
        <title>Zend\Cache\Storage\Plugin</title>
    </info>

    <section xml:id="zend.cache.storage.plugin.intro">
        <info>
            <title>Overview</title>
        </info>

        <para>
            Cache storage plug-ins are objects to add missing functionalities
            or to change influences of a storage adapter. This can be very
            helpful implement caching into an application.
        </para>

        <para>
            The plug-ins listen to events the adapter triggers and can change
            called method arguments (*.post - events), skipping and directly
            return a result (using <methodname>stopPropagation</methodname>),
            changing the result (with <methodname>setResult</methodname> of
            <classname>Zend\Cache\Storage\PostEvent</classname>) and catching
            exceptions (with <classname>Zend\Cache\Storage\ExceptionEvent</classname>).
        </para>

    </section>

    <section xml:id="zend.cache.storage.plugin.quick-start">
        <info>
            <title>Quick Start</title>
        </info>

        <para>
            Storage plug-ins can either be created from <classname>Zend\Cache\StorageFactory</classname>
            with the <methodname>pluginFactory</methodname>, or by simply instantiating
            one of the <classname>Zend\Cache\Storage\Plugin\*</classname>classes. 
        </para>
        
        <para>
            To make live easier the <classname>Zend\Cache\StorageFactory</classname>
            comes with a method <methodname>factory</methodname> to create an adapter
            and creating/adding all given plug-ins at once.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Cache\StorageFactory;

$cache = StorageFactory::factory(array(
    'adapter' => 'filesystem',
    'plugins' => array('serializer'),
));

// OR, the completely equivalent

$cache  = StorageFactory::adapterFactory('filesystem');
$plugin = StorageFactory::pluginFactory('serializer');
$cache->addPlugin($plugin);

// OR, the completely equivalent

$cache  = new Zend\Cache\Storage\Adapter\Filesystem();
$plugin = new Zend\Cache\Storage\Plugin\Serializer();
$cache->addPlugin($plugin);

]]></programlisting>

    </section>

    <section xml:id="zend.cache.storage.plugin.options">
        <info>
            <title>Configuration Options</title>
        </info>

    <section xml:id="zend.cache.storage.plugin.plugin-options.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-clearing-factor">
                <term>
                    <methodsynopsis>
                        <methodname>setClearingFactor</methodname>
                        <methodparam>
                            <funcparams>int $clearingFactor</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set automatic clearing factor</para>
                    <para>Used by: - ClearByFactor</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-clearing-factor">
                <term>
                    <methodsynopsis>
                        <methodname>getClearingFactor</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get automatic clearing factor</para>
                    <para>Used by: - ClearByFactor</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-clear-by-namespace">
                <term>
                    <methodsynopsis>
                        <methodname>setClearByNamespace</methodname>
                        <methodparam>
                            <funcparams>bool $clearByNamespace</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set flag indicating whether or not to clear by namespace</para>
                    <para>Used by: - ClearByFactor</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-clear-by-namespace">
                <term>
                    <methodsynopsis>
                        <methodname>getClearByNamespace</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Clear items by namespace?</para>
                    <para>Used by: - ClearByFactor</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-exception-callback">
                <term>
                    <methodsynopsis>
                        <methodname>setExceptionCallback</methodname>
                        <methodparam>
                            <funcparams>callable $exceptionCallback</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set callback to call on intercepted exception</para>
                    <para>Used by: - ExceptionHandler</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-exception-callback">
                <term>
                    <methodsynopsis>
                        <methodname>getExceptionCallback</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get callback to call on intercepted exception</para>
                    <para>Used by: - ExceptionHandler</para>
                    <para>Returns null|callable</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-optimizing-factor">
                <term>
                    <methodsynopsis>
                        <methodname>setOptimizingFactor</methodname>
                        <methodparam>
                            <funcparams>int $optimizingFactor</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set automatic optimizing factor</para>
                    <para>Used by: - OptimizeByFactor</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-optimizing-factor">
                <term>
                    <methodsynopsis>
                        <methodname>getOptimizingFactor</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set automatic optimizing factor</para>
                    <para>Used by: - OptimizeByFactor</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-serializer">
                <term>
                    <methodsynopsis>
                        <methodname>setSerializer</methodname>
                        <methodparam>
                            <funcparams>string|Zend\Serializer\Adapter $serializer</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set serializer</para>
                    <para>Used by: - Serializer</para>
                    <para>Returns Zend\Cache\Storage\Plugin\Serializer</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-serializer">
                <term>
                    <methodsynopsis>
                        <methodname>getSerializer</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get serializer</para>
                    <para>Used by: - Serializer</para>
                    <para>Returns Zend\Serializer\Adapter</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-serializer-options">
                <term>
                    <methodsynopsis>
                        <methodname>setSerializerOptions</methodname>
                        <methodparam>
                            <funcparams>array $serializerOptions</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set configuration options for instantiating a serializer adapter</para>
                    <para>Used by: - Serializer</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-serializer-options">
                <term>
                    <methodsynopsis>
                        <methodname>getSerializerOptions</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get configuration options for instantiating a serializer adapter</para>
                    <para>Used by: - Serializer</para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.set-throw-exceptions">
                <term>
                    <methodsynopsis>
                        <methodname>setThrowExceptions</methodname>
                        <methodparam>
                            <funcparams>bool $throwExceptions</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set flag indicating we should re-throw exceptions</para>
                    <para>Used by: - ExceptionHandler</para>
                    <para>Returns Zend\Cache\Storage\Plugin\PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.plugin-options.methods.get-throw-exceptions">
                <term>
                    <methodsynopsis>
                        <methodname>getThrowExceptions</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Should we re-throw exceptions?</para>
                    <para>Used by: - ExceptionHandler</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>
    </section>

    <section xml:id="zend.cache.storage.plugin.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.cache.storage.plugin.methods.set-options">
                <term>
                    <methodsynopsis>
                        <methodname>setOptions</methodname>
                        <methodparam>
                            <funcparams>Zend\Cache\Storage\Plugin\PluginOptions $options</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set options</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Plugin</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.plugin.methods.get-options">
                <term>
                    <methodsynopsis>
                        <methodname>getOptions</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get options</para>
                    <para></para>
                    <para>Returns PluginOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.event-manager.listener-aggregate.methods.attach">
                <term>
                    <methodsynopsis>
                        <methodname>attach</methodname>
                        <methodparam>
                            <funcparams>EventCollection $events</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Attach one or more listeners</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.event-manager.listener-aggregate.methods.detach">
                <term>
                    <methodsynopsis>
                        <methodname>detach</methodname>
                        <methodparam>
                            <funcparams>EventCollection $events</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Detach all previously attached listeners</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>

    <section xml:id="zend.cache.storage.plugin.examples">
        <info>
            <title>TODO: Examples</title>
        </info>

    </section>
</section>
