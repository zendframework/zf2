<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.cache.pattern">
    <info>
        <title>Zend\Cache\Pattern</title>
    </info>

    <section xml:id="zend.cache.pattern.intro">
        <info>
            <title>Overview</title>
        </info>

        <para>
            Cache patterns are configurable objects to solve known performance
            bottlenecks. Each of it should be used only on a specified situation.
            For example you can use one of the patterns callback, object or class
            to cache method and function calls or to cache output generation the
            output cache pattern would be the right for you.
        </para>

        <para>
            All cache patterns implements the same interface
            <classname>Zend\Cache\Pattern</classname> and extends the abstract class
            <classname>Zend\Cache\Pattern\AbstractPattern</classname> to implement
            basic logic.
        </para>

        <para>
            Configuration will be done by
            <classname>Zend\Cache\Pattern\PatternOptions</classname> which can simply be
            instantiated with an associative array of options passing to the constructor.
            To configure an pattern object you can set an instance of
            <classname>Zend\Cache\Pattern\PatternOptions</classname> with
            <methodname>setOptions</methodname> or put it as second argument to the factory.
        </para>

        <para>
            It's also possible to use one instance of
            <classname>Zend\Cache\Pattern\PatternOptions</classname> and pass it to
            different patterns.
        </para>

    </section>

    <section xml:id="zend.cache.pattern.quick-start">
        <info>
            <title>Quick Start</title>
        </info>

        <para>
            Pattern objects can either be created from the provided
            <classname>Zend\Cache\PatternFactory</classname> factory, or, by simply
            instantiating one of the <classname>Zend\Cache\XXXCache</classname>
            class.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory,
    Zend\Cache\Pattern\PatternOptions;

$callbackCache = PatternFactory::factory('callback', array(
    'storage'      => 'apc',
    'cache_output' => true,
));

// OR, the completely equivalent

$callbackCache = new \Zend\Cache\Pattern\CallbackCache();
$callbackCache->setOptions(new PatternOptions(array(
    'storage'      => 'apc',
    'cache_output' => true,
)));
]]></programlisting>

    </section>

    <section xml:id="zend.cache.pattern.options">
        <info>
            <title>Configuration Options</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-cache-by-default">
                <term>
                    <methodsynopsis>
                        <methodname>setCacheByDefault</methodname>
                        <methodparam>
                            <funcparams>bool $cacheByDefault</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set flag indicating whether or not to cache by default</para>
                    <para>Used by: - ClassCache - ObjectCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-cache-by-default">
                <term>
                    <methodsynopsis>
                        <methodname>getCacheByDefault</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Do we cache by default?</para>
                    <para>Used by: - ClassCache - ObjectCache</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-cache-output">
                <term>
                    <methodsynopsis>
                        <methodname>setCacheOutput</methodname>
                        <methodparam>
                            <funcparams>bool $cacheOutput</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set whether or not to cache output</para>
                    <para>Used by: - CallbackCache - ClassCache - ObjectCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-cache-output">
                <term>
                    <methodsynopsis>
                        <methodname>getCacheOutput</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Will we cache output?</para>
                    <para>Used by: - CallbackCache - ClassCache - ObjectCache</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-class">
                <term>
                    <methodsynopsis>
                        <methodname>setClass</methodname>
                        <methodparam>
                            <funcparams>string $class</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set class name</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-class">
                <term>
                    <methodsynopsis>
                        <methodname>getClass</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get class name</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns null|string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-class-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>setClassCacheMethods</methodname>
                        <methodparam>
                            <funcparams>array $classCacheMethods</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set list of method return values to cache</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-class-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>getClassCacheMethods</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get list of methods from which to cache return values</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-class-non-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>setClassNonCacheMethods</methodname>
                        <methodparam>
                            <funcparams>array $classNonCacheMethods</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set list of method return values NOT to cache</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-class-non-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>getClassNonCacheMethods</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get list of methods from which NOT to cache return values</para>
                    <para>Used by: - ClassCache</para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-dir-perm">
                <term>
                    <methodsynopsis>
                        <methodname>setDirPerm</methodname>
                        <methodparam>
                            <funcparams>string $dirPerm</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set directory permissions</para>
                    <para>Sets {@link $dirUmask} property to inverse of provided value.</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-dir-perm">
                <term>
                    <methodsynopsis>
                        <methodname>getDirPerm</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Gets directory permissions</para>
                    <para>Proxies to {@link $dirUmask} property, returning its inverse.</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-dir-umask">
                <term>
                    <methodsynopsis>
                        <methodname>setDirUmask</methodname>
                        <methodparam>
                            <funcparams>int $dirUmask</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set directory umask</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-dir-umask">
                <term>
                    <methodsynopsis>
                        <methodname>getDirUmask</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get directory umask</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-file-locking">
                <term>
                    <methodsynopsis>
                        <methodname>setFileLocking</methodname>
                        <methodparam>
                            <funcparams>bool $fileLocking</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set whether or not file locking should be used</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-file-locking">
                <term>
                    <methodsynopsis>
                        <methodname>getFileLocking</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Is file locking enabled?</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-file-perm">
                <term>
                    <methodsynopsis>
                        <methodname>setFilePerm</methodname>
                        <methodparam>
                            <funcparams>string $filePerm</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set file permissions</para>
                    <para>Sets {@link $fileUmask} property to inverse of provided value.</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-file-perm">
                <term>
                    <methodsynopsis>
                        <methodname>getFilePerm</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Gets file permissions</para>
                    <para>Proxies to {@link $fileUmask} property, returning its inverse.</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-file-umask">
                <term>
                    <methodsynopsis>
                        <methodname>setFileUmask</methodname>
                        <methodparam>
                            <funcparams>int $fileUmask</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set file umask</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-file-umask">
                <term>
                    <methodsynopsis>
                        <methodname>getFileUmask</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get file umask</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-index-filename">
                <term>
                    <methodsynopsis>
                        <methodname>setIndexFilename</methodname>
                        <methodparam>
                            <funcparams>string $indexFilename</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set value for index filename</para>
                    <para></para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-index-filename">
                <term>
                    <methodsynopsis>
                        <methodname>getIndexFilename</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get value for index filename</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-object">
                <term>
                    <methodsynopsis>
                        <methodname>setObject</methodname>
                        <methodparam>
                            <funcparams>mixed $object</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set object to cache</para>
                    <para></para>
                    <para>Returns this</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-object">
                <term>
                    <methodsynopsis>
                        <methodname>getObject</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get object to cache</para>
                    <para></para>
                    <para>Returns null|object</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-object-cache-magic-properties">
                <term>
                    <methodsynopsis>
                        <methodname>setObjectCacheMagicProperties</methodname>
                        <methodparam>
                            <funcparams>bool $objectCacheMagicProperties</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set flag indicating whether or not to cache magic properties</para>
                    <para>Used by: - ObjectCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-object-cache-magic-properties">
                <term>
                    <methodsynopsis>
                        <methodname>getObjectCacheMagicProperties</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Should we cache magic properties?</para>
                    <para>Used by: - ObjectCache</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-object-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>setObjectCacheMethods</methodname>
                        <methodparam>
                            <funcparams>array $objectCacheMethods</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set list of object methods for which to cache return values</para>
                    <para></para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-object-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>getObjectCacheMethods</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get list of object methods for which to cache return values</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-object-key">
                <term>
                    <methodsynopsis>
                        <methodname>setObjectKey</methodname>
                        <methodparam>
                            <funcparams>mixed $objectKey</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the object key part.</para>
                    <para>Used to generate a callback key in order to speed up key generation. Used by: - ObjectCache</para>
                    <para>Returns this</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-object-key">
                <term>
                    <methodsynopsis>
                        <methodname>getObjectKey</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get object key</para>
                    <para>Used by: - ObjectCache</para>
                    <para>Returns mixed</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-object-non-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>setObjectNonCacheMethods</methodname>
                        <methodparam>
                            <funcparams>array $objectNonCacheMethods</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set list of object methods for which NOT to cache return values</para>
                    <para></para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-object-non-cache-methods">
                <term>
                    <methodsynopsis>
                        <methodname>getObjectNonCacheMethods</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get list of object methods for which NOT to cache return values</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-public-dir">
                <term>
                    <methodsynopsis>
                        <methodname>setPublicDir</methodname>
                        <methodparam>
                            <funcparams>string $publicDir</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set location of public directory</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-public-dir">
                <term>
                    <methodsynopsis>
                        <methodname>getPublicDir</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get location of public directory</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns null|string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-storage">
                <term>
                    <methodsynopsis>
                        <methodname>setStorage</methodname>
                        <methodparam>
                            <funcparams>string|array|Zend\Cache\Storage\Adapter $storage</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set storage adapter</para>
                    <para>Required for the following Pattern classes: - CallbackCache - ClassCache - ObjectCache - OutputCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-storage">
                <term>
                    <methodsynopsis>
                        <methodname>getStorage</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get storage adapter</para>
                    <para>Used by: - CallbackCache - ClassCache - ObjectCache - OutputCache</para>
                    <para>Returns null|Zend\Cache\Storage\Adapter</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-tag-key">
                <term>
                    <methodsynopsis>
                        <methodname>setTagKey</methodname>
                        <methodparam>
                            <funcparams>string $tagKey</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set tag key</para>
                    <para></para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-tag-key">
                <term>
                    <methodsynopsis>
                        <methodname>getTagKey</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get tag key</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-tags">
                <term>
                    <methodsynopsis>
                        <methodname>setTags</methodname>
                        <methodparam>
                            <funcparams>array $tags</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set tags</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-tags">
                <term>
                    <methodsynopsis>
                        <methodname>getTags</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get tags</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.set-tag-storage">
                <term>
                    <methodsynopsis>
                        <methodname>setTagStorage</methodname>
                        <methodparam>
                            <funcparams>string|array|Zend\Cache\Storage\Adapter $tagStorage</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set storage adapter for tags</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns Zend\Cache\Pattern\PatternOptions</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.pattern-options.methods.get-tag-storage">
                <term>
                    <methodsynopsis>
                        <methodname>getTagStorage</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get storage adapter for tags</para>
                    <para>Used by: - CaptureCache</para>
                    <para>Returns null|Zend\Cache\Storage\Adapter</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>

    <section xml:id="zend.cache.pattern.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.cache.pattern.methods.set-options">
                <term>
                    <methodsynopsis>
                        <methodname>setOptions</methodname>
                        <methodparam>
                            <funcparams>Zend\Cache\Pattern\PatternOptions $options</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set pattern options</para>
                    <para></para>
                    <para>Returns Zend\Cache\Pattern</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.pattern.methods.get-options">
                <term>
                    <methodsynopsis>
                        <methodname>getOptions</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get all pattern options</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>

    <section xml:id="zend.cache.pattern.examples">
        <info>
            <title>Examples</title>
        </info>

        <example xml:id="zend.cache.pattern.examples.callback">
            <info><title>Using the callback cache pattern</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory;

$callbackCache = PatternFactory::factory('callback', array(
    'storage' => 'apc'
));

// Calls and caches the function doResourceIntensiceStuff with three arguments
// and returns result
$result = $callbackCache->call('doResourceIntensiceStuff', array(
    'argument1',
    'argument2',
    'argumentN'
));
]]></programlisting>
        </example>

        <example xml:id="zend.cache.pattern.examples.object">
            <info><title>Using the object cache pattern</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory;

$object = new MyObject();
$objectProxy = PatternFactory::factory('object', array(
    'object'  => $object
    'storage' => 'apc',
));

// Calls and caches $object->doResourceIntensiceStuff with three arguments
// and returns result
$result = $objectProxy->doResourceIntensiceStuff('argument1', 'argument2', 'argumentN'));
]]></programlisting>
        </example>

        <example xml:id="zend.cache.pattern.examples.class">
            <info><title>Using the class cache pattern</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory;

$classProxy = PatternFactory::factory('cache', array(
    'class'   => 'MyClass'
    'storage' => 'apc',
));

// Calls and caches MyClass::doResourceIntensiceStuff with three arguments
// and returns result
$result = $classProxy->doResourceIntensiceStuff('argument1', 'argument2', 'argumentN'));
]]></programlisting>
        </example>

        <example xml:id="zend.cache.pattern.examples.output">
            <info><title>Using the output cache pattern</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory;

$outputCache = PatternFactory::factory('output', array(
    'storage' => 'filesystem'
));

// Start capturing all output excl. headers. and write it to storage.
// If there is already an cached item with the same key it will be
// output and return true, else false.
if ($outputCache->start('MyUniqueKey') === false) {
    echo 'cache output since: ' . date('H:i:s') . "<br />\n";
    
    // end capturing output, write content to cache storage and display
    // captured content
    $outputCache->end()
}

echo 'never cached output';

]]></programlisting>
        </example>

        <example xml:id="zend.cache.pattern.examples.capture">
            <info><title>Using the capture cache pattern</title></info>
            
            <para>
                You need to configure your HTTPd to redirect missing content
                run your script generating it.
            </para>
            
            <para>
                This example uses Apache with the following .htaccess:
            </para>
            
            <programlisting language="plain"><![CDATA[
ErrorDocument 404 /index.php
]]></programlisting>
            
            <para>Within your index.php you can add the following content:</para>
            
            <programlisting language="php"><![CDATA[
use Zend\Cache\PatternFactory;

$capture = PatternFactory::factory('capture', array(
    'public_dir' => __DIR__
));

// Start capturing all output excl. headers. and write to public directory
// If the request was already written the file will be overwritten.
$capture->start();

// do stuff to dynamical generate output

]]></programlisting>
        </example>

    </section>
</section>
