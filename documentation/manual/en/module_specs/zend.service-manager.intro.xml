<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.service-manager.intro">
    <title>Zend\ServiceManager</title>

    <para>
        The <classname>ServiceManager</classname> is a Service Locator implementation. A Service
        Locator is a well-known object in which you may register objects and later retrieve them.
        The implementation within Zend Framework provides the following features:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis role="strong">Service registration</emphasis>. You can register an object
                under a given name (<code>$services-&gt;setService('foo', $object)</code>).
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Lazy-loaded service objects</emphasis>. You can tell the
                manager what class to instantiate on first request
                (<code>$services-&gt;setInvokableClass('foo', 'Fully\Qualified\Classname')</code>).
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Service factories</emphasis>. Instead of an actual object
                instance or a class name, you can tell the manager to invoke the provided factory in
                order to get the object instance. Factories may be either any PHP callable, an
                object implementing <classname>Zend\ServiceManager\FactoryInterface</classname>, or
                the name of a class implementing that interface.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Service aliasing</emphasis>. You can tell the manager that
                when a particular name is requested, use the provided name instead. You can alias to
                a known service, a lazy-loaded service, a factory, or even other aliases.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Abstract factories</emphasis>. An abstract factory can be
                considered a "fallback" -- if the service does not exist in the manager, it will
                then pass it to any abstract factories attached to it until one of them is able to
                return an object.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Initializers</emphasis>. You may want certain injection
                points always populated -- as an example, any object you load via the service
                manager that implements <classname>Zend\EventManager\EventManagerAware</classname>
                should likely receive an <classname>EventManager</classname> instance.
                <emphasis>Initializers</emphasis> are PHP callbacks or classes implementing
                <classname>Zend\ServiceManager\InitializerInterface</classname>; they receive the
                new instance, and can then manipulate it.
            </para>
        </listitem>
    </itemizedlist>

    <para>
        In addition to the above, the <classname>ServiceManager</classname> also provides optional
        ties to <classname>Zend\Di</classname>, allowing <classname>Di</classname> to act as an
        initializer or an abstract factory for the manager.
    </para>
</section>
