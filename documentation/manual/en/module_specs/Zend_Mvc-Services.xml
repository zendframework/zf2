<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xml:id="zend.mvc.services">
  <title>Default Services</title>

  <para>
      The default and recommended way to write Zend Framework applications uses a set of services
      defined in the <classname>Zend\Mvc\Service</classname> namespace. This chapter details what
      each of those services are, the classes they represent, and the configuration options
      available.
  </para>

  <section xml:id="zend.mvc.services.service-manager-configuration">
      <title>ServiceManagerConfiguration</title>

      <para>
          This is the one service class referenced directly in the bootstrapping. It provides the
          following:
      </para>

      <itemizedlist>
          <listitem>
              <para><emphasis role="strong">Invokable services</emphasis></para>

              <itemizedlist>
                  <listitem>
                      <para>
                          <classname>DispatchListener</classname>, mapping to
                          <classname>Zend\Mvc\DispatchListener</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Request</classname>, mapping to
                          <classname>Zend\Http\PhpEnvironment\Request</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Response</classname>, mapping to
                          <classname>Zend\Http\PhpEnvironment\Response</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>RouteListener</classname>, mapping to
                          <classname>Zend\Mvc\RouteListener</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>VeiwManager</classname>, mapping to
                          <classname>Zend\Mvc\View\ViewManager</classname>.
                      </para>
                  </listitem>
              </itemizedlist>
          </listitem>

          <listitem>
              <para><emphasis role="strong">Factories</emphasis></para>

              <itemizedlist>
                  <listitem>
                      <para>
                          <classname>Application</classname>, mapping to
                          <classname>Zend\Mvc\Service\ApplicationFactory</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Configuration</classname>, mapping to
                          <classname>Zend\Mvc\Service\ConfigurationFactory</classname>. Internally,
                          this pulls the <classname>ModuleManager</classname> service, and calls its
                          <methodname>loadModules()</methodname> method, and retrieves the merged
                          configuration from the module event. As such, this service contains the
                          entire, merged application configuration.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ControllerLoader</classname>, mapping to
                          <classname>Zend\Mvc\Service\ControllerLoaderFactory</classname>.
                          Internally, this pulls the <classname>Configuration</classname> service,
                          and, if it contains a <varname>controller</varname> key, inspects that for
                          <varname>classes</varname> and
                          <varname>factories</varname> subkeys. These are used to configure a scoped service manager
                          container, from which controllers will be retrieved.
                      </para>

                      <para>
                          Additionally, the scoped container is configured to use the
                          <classname>Di</classname> service as both an initializer as well as an
                          abstract service factory -- effectively allowing you to fall back to DI in
                          order to retrieve your controllers.
                      </para>

                      <para>
                          Finally, if the loaded controller is <classname>Pluggable</classname>, an
                          initializer will inject it with the
                          <classname>ControllerPluginBroker</classname> service.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ControllerPluginBroker</classname>, mapping to
                          <classname>Zend\Mvc\Service\ControllerPluginBrokerFactory</classname>.
                          This instantiates the
                          <classname>Zend\Mvc\Controller\PluginBroker</classname> instance, passing
                          it the <classname>ControllerPluginLoader</classname> service as well as
                          the service manager instance.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ControllerPluginLoader</classname>, mapping to
                          <classname>Zend\Mvc\Service\ControllerPluginLoaderFactory</classname>.
                          This grabs the <classname>Configuration</classname> service, and looks for
                          a <varname>controller</varname> key with a <varname>map</varname> subkey. If found, this value is passed to
                          the constructor of <classname>Zend\Mvc\Controller\PluginLoader</classname>
                          (otherwise, an empty array is passed).
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>DependencyInjector</classname>, mapping to
                          <classname>Zend\Mvc\Service\DiFactory</classname>. This pulls the
                          <classname>Configuration</classname> service, and looks for a "di" key; if
                          found, that value is used to configure a new
                          <classname>Zend\Di\Di</classname> instance. Additionally, the
                          <classname>Di</classname> instance is used to seed a
                          <classname>Zend\ServiceManager\Di\DiAbstractServiceFactory</classname>
                          instance which is then attached to the service manager as an abstract
                          factory -- effectively enabling DI as a fallback for providing services.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>EventManager</classname>, mapping to
                          <classname>Zend\Mvc\Service\EventManagerFactory</classname>. This factory
                          composes a static reference to a
                          <classname>SharedEventManager</classname>, which is injected in a new
                          <classname>EventManager</classname> instance. This service is not shared
                          by default, allowing the ability to have an
                          <classname>EventManager</classname> per service, with a shared
                          <classname>SharedEventManager</classname> injected in each.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ModuleManager</classname>, mapping to
                          <classname>Zend\Mvc\Service\ModuleManagerFactory</classname>.
                      </para>

                      <para>
                          This is perhaps the most complex factory in the MVC stack. It expects that
                          an <classname>ApplicationConfiguration</classname> service has been injected, with keys for
                          <varname>module_listener_options</varname> and <varname>modules</varname>; see the quick start for samples.
                      </para>

                      <para>
                          It instantiates an instance of
                          <classname>Zend\ModuleManager\Listener\DefaultListenerAggregate</classname>,
                          using the "module_listener_options" retrieved. It also instantiates an
                          instance of
                          <classname>Zend\ModuleManager\Listener\ServiceListener</classname>,
                          providing it the service manager.
                      </para>

                      <para>
                          Next, it retrieves the <classname>EventManager</classname> service, and
                          attaches the above listeners.
                      </para>

                      <para>
                          It instantiates a <classname>Zend\ModuleManager\ModuleEvent</classname>
                          instance, setting the "ServiceManager" parameter to the service manager
                          object.
                      </para>

                      <para>
                          Finally, it instantiates a
                          <classname>Zend\ModuleManager\ModuleManager</classname> instance, and
                          injects the <classname>EventManager</classname> and
                          <classname>ModuleEvent</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Router</classname>, mapping to
                          <classname>Zend\Mvc\Service\RouterFactory</classname>. This grabs the
                          <classname>Configuration</classname> service, and pulls from the <varname>router</varname>
                          key, passing it to
                          <methodname>Zend\Mvc\Router\Http\TreeRouteStack::factory</methodname> in
                          order to get a configured router instance.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ViewFeedRenderer</classname>, mapping to
                          <classname>Zend\Mvc\Service\ViewFeedRendererFactory</classname>, which
                          simply returns a <classname>Zend\View\Renderer\FeedRenderer</classname>
                          instance.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ViewFeedStrategy</classname>, mapping to
                          <classname>Zend\Mvc\Service\ViewFeedStrategyFactory</classname>. This
                          instantiates a <classname>Zend\View\Strategy\FeedStrategy</classname>
                          instance with the <classname>VeiwFeedRenderer</classname> service.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ViewJsonRenderer</classname>, mapping to
                          <classname>Zend\Mvc\Service\ViewJsonRendererFactory</classname>, which
                          simply returns a <classname>Zend\View\Renderer\JsonRenderer</classname>
                          instance.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>ViewJsonStrategy</classname>, mapping to
                          <classname>Zend\Mvc\Service\ViewJsonStrategyFactory</classname>. This
                          instantiates a <classname>Zend\View\Strategy\JsonStrategy</classname>
                          instance with the <classname>VeiwJsonRenderer</classname> service.
                      </para>
                  </listitem>
              </itemizedlist>
          </listitem>

          <listitem>
              <para><emphasis role="strong">Aliases</emphasis></para>

              <itemizedlist>
                  <listitem>
                      <para>
                          <classname>Config</classname>, mapping to the
                          <classname>Configuration</classname> service.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Di</classname>, mapping to the
                          <classname>DependencyInjector</classname> service.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Zend\EventManager\EventManagerInterface</classname>, mapping to the
                          <classname>EventManager</classname> service. This is mainly to
                          ensure that when falling through to DI, classes are still injected via the
                          <classname>ServiceManager</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Zend\Mvc\Controller\PluginBroker</classname>, mapping to the
                          <classname>ControllerPluginBroker</classname> service. This is mainly to
                          ensure that when falling through to DI, classes are still injected via the
                          <classname>ServiceManager</classname>.
                      </para>
                  </listitem>

                  <listitem>
                      <para>
                          <classname>Zend\Mvc\Controller\PluginLoader</classname>, mapping to the
                          <classname>ControllerPluginLoader</classname> service. This is mainly to
                          ensure that when falling through to DI, classes are still injected via the
                          <classname>ServiceManager</classname>.
                      </para>
                  </listitem>

              </itemizedlist>
          </listitem>
      </itemizedlist>

      <para>
          Additionally, two initializers are registered. Initializers are run on created instances,
          and may be used to further configure them. The two initializers the
          <classname>ServiceManagerConfiguration</classname> class creates and registers do the
          following:
      </para>

      <itemizedlist>
          <listitem>
              <para>
                  For objects that implement
                  <classname>Zend\EventManager\EventManagerAwareInterface</classname>, the
                  <classname>EventManager</classname> service will be retrieved and injected. This
                  service is <emphasis role="strong">not</emphasis> shared, though each instance it
                  creates is injected with a shared instance of
                  <classname>SharedEventManager</classname>.
              </para>
          </listitem>

          <listitem>
              <para>
                  For objects that implement
                  <classname>Zend\ServiceManager\ServiceManagerAwareInterface</classname>, the
                  <classname>ServiceManager</classname> will inject itself into the object.
              </para>
          </listitem>
      </itemizedlist>

      <para>
          Finally, the <classname>ServiceManager</classname> registers itself as the
          <classname>ServiceManager</classname> service, and aliases itself to the class names
          <classname>Zend\ServiceManager\ServiceManagerInterface</classname> and
          <classname>Zend\ServiceManager\ServiceManager</classname>.
      </para>
  </section>

  <section xml:id="zend.mvc.services.view-manager">
      <title>ViewManager</title>

      <para>
          The View layer within <classname>Zend\Mvc</classname> consists of a large number of
          collaborators and event listeners. As such,
          <classname>Zend\Mvc\View\ViewManager</classname> was created to handle creation of the
          various objects, as well as wiring them together and establishing event listeners.
      </para>

      <para>
          The <classname>ViewManager</classname> itself is an event listener on the
          <varname>bootstrap</varname> event. It retrieves the <classname>ServiceManager</classname>
          from the <classname>Application</classname> object, as well as its composed
          <classname>EventManager</classname>. 
      </para>

      <para>
          Configuration for all members of the <classname>ViewManager</classname> fall under the
          <varname>view_manager</varname> configuration key, and expect values as noted below.
          The following services are created and managed by the <classname>ViewManager</classname>:
      </para>

      <itemizedlist>
            <listitem>
                <para>
                    <classname>ViewHelperLoader</classname>, representing and aliased to
                    <classname>Zend\View\HelperLoader</classname>. If a
                    <varname>helper_map</varname> subkey is provided, its value will be used as a
                    map to seed the helper loader.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewHelperBroker</classname>, representing and aliased to
                    <classname>Zend\View\HelperBroker</classname>. It is seeded with the
                    <classname>ViewHelperLoader</classname> service, as well as the
                    <classname>ServiceManager</classname> itself. 
                </para>

                <para>
                    The <classname>Router</classname> service is retrieved, and injected into the
                    <classname>Url</classname> helper. 
                </para>

                <para>
                    If the <varname>base_path</varname> key is present, it is used to inject the
                    <classname>BasePath</classname> view helper; otherwise, the
                    <classname>Request</classname> service is retrieved, and the value of its
                    <methodname>getBasePath()</methodname> method is used.
                </para>

                <para>
                    If the <varname>doctype</varname> key is present, it will be used to set the
                    value of the <classname>Doctype</classname> view helper.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewTemplateMapResolver</classname>, representing and aliased to
                    <classname>Zend\View\Resolver\TemplateMapResolver</classname>. If a
                    <varname>template_map</varname> key is present, it will be used to seed the
                    template map.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewTemplatePathStack</classname>, representing and aliased to
                    <classname>Zend\View\Resolver\TemplatePathStack</classname>. If a
                    <varname>template_path_stack</varname> key is prsent, it will be used to seed
                    the stack.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewResolver</classname>, representing and  aliased to
                    <classname>Zend\View\Resolver\AggregateResolver</classname> and
                    <classname>Zend\View\Resolver\ResolverInterface</classname>. It is seeded with
                    the <classname>ViewTemplateMapResolver</classname> and
                    <classname>ViewTemplatePathStack</classname> services as resolvers.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewRenderer</classname>, representing and aliased to
                    <classname>Zend\View\Renderer\PhpRenderer</classname> and
                    <classname>Zend\View\Renderer\RendererInterface</classname>. It is seeded with
                    the <classname>ViewResolver</classname> and
                    <classname>ViewHelperBroker</classname> services. Additionally, the
                    <classname>ViewModel</classname> helper gets seeded with the
                    <classname>ViewModel</classname> as its root (layout) model.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewPhpRendererStrategy</classname>, representing and aliased to
                    <classname>Zend\View\Strategy\PhpRendererStrategy</classname>. It gets seeded
                    with the <classname>ViewRenderer</classname> service.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>View</classname>, representing and aliased to
                    <classname>Zend\View\View</classname>. It gets seeded with the
                    <classname>EventManager</classname> service, and attaches the
                    <classname>ViewPhpRendererStrategy</classname> as an aggregate listener.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>DefaultRenderingStrategy</classname>, representing and aliased to
                    <classname>Zend\Mvc\View\DefaultRenderingStrategy</classname>. If the
                    <varname>layout</varname> key is prsent, it is used to seed the strategy's
                    layout template. It is seeded with the <classname>View</classname> service.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ExceptionStrategy</classname>, representing and aliased to
                    <classname>Zend\Mvc\View\ExceptionStrategy</classname>. If the
                    <varname>dislay_exceptions</varname> or <varname>exception_template</varname>
                    keys are present, they are usd to configure the strategy.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>RouteNotFoundStrategy</classname>, representing and aliased to
                    <classname>Zend\Mvc\View\RouteNotFoundStrategy</classname> and
                    <classname>404Stategy</classname>. If the
                    <varname>display_not_found_reason</varname> or
                    <varname>not_found_template</varname> keys are present, they are used to
                    configure the strategy.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>ViewModel</classname>. In this case, no service is registered; the
                    <classname>ViewModel</classname> is simply retrieved from the
                    <classname>MvcEvent</classname> and injected with the layout template name.
                    template
                </para>
            </listitem>
      </itemizedlist>

      <para>
          The <classname>ViewManager</classname> also creates several other listeners, but does not
          expose them as services; these include
          <classname>Zend\Mvc\View\CreateViewModelListener</classname>,
          <classname>Zend\Mvc\View\InjectTemplateListener</classname>, and
          <classname>Zend\Mvc\View\InjectViewModelListener</classname>. These, along with
          <classname>RouteNotFoundStrategy</classname>,
          <classname>ExceptionStrategy</classname>, and
          <classname>DefaultRenderingStrategy</classname> are attached as listeners either to the
          application
          <classname>EventManager</classname> instance or the
          <classname>SharedEventManager</classname> instance.
      </para>

      <para>
          Finally, if you have a <varname>strategies</varname> key in your configuration, the
          <classname>ViewManager</classname> will loop over these and attach them in order to the
          <classname>View</classname> service as listeners, at a priority of 100 (allowing them to
          execute before the <classname>DefaultRenderingStrategy</classname>).
      </para>
  </section>

  <section xml:id="zend.mvc.services.app-config">
      <title>Application Configuration Options</title>

      <para>
          The following options may be used to provide initial configuration for the
          <classname>ServiceManager</classname>, <classname>ModuleManager</classname>, and
          <classname>Application</classname> instances, allowing them to then find and aggregate the
          configuration used for the <classname>Configuration</classname> service, which is intended
          for configuring all other objects in the system.
      </para>

      <programlisting language="php"><![CDATA[
<?php
return array(
    // This should be an array of module namespaces used in the application.
    'modules' => array(
    ),

    // These are various options for the listeners attached to the ModuleManager
    'module_listener_options' => array(
        // This should be an array of paths in which modules reside.
        // If a string key is provided, the listener will consider that a module
        // namespace, the value of that key the specific path to that module's 
        // Module class.
        'module_paths' => array(
        ),

        // An array of paths from which to glob configuration files after 
        // modules are loaded. These effectively overide configuration 
        // provided by modules themselves. Paths may use GLOB_BRACE notation.
        'config_glob_paths' => array(
        ),

        // Whether or not to enable a configuration cache.
        // If enabled, the merged configuration will be cached and used in
        // subsequent requests.
        'config_cache_enabled' => $booleanValue,

        // The key used to create the configuration cache file name.
        'config_cache_key' => $stringKey,

        // The path in which to cache merged configuration.
        'cache_dir' => $stringPath,
    ),

    // Initial configuration with which to seed the ServiceManager.
    // Should be compatible with Zend\ServiceManager\Configuration.
    'service_manager' => array(
    ),
);
]]></programlisting>
  </section>

  <section xml:id="zend.mvc.services.config">
      <title>Default Configuration Options</title>

      <para>
          The following options are available when using the default services configured by the
          <classname>ServiceManagerConfiguration</classname> and <classname>ViewManager</classname>.
      </para>

      <programlisting language="php"><![CDATA[
<?php
return array(
    // The following are used to configure controller or controller plugin loading
    'controller' => array(
        // Map of controller "name" to class
        // This should be used if you do not need to inject any dependencies
        // in your controller
        'classes' => array(
        ),

        // Map of controller "name" to factory for creating controller instance
        // You may provide either the class name of a factory, or a PHP callback.
        'factories' => array(
        ),

        // Map of controller plugin names to their classes
        'map' => array(
        ),
    ),

    // The following is used to configure a Zend\Di\Di instance.
    // The array should be in a format that Zend\Di\Configuration can understand.
    'di' => array(
    ),

    // Configuration for the Router service
    // Can contain any router configuration, but typically will always define
    // the routes for the application. See the router documentation for details
    // on route configuration.
    'router' => array(
        'routes' => array(
        ),
    ),

    // ViewManager configuration
    'view_manager' => array(
        // Defined helpers.
        // Typically helper name/helper class pairs. Can contain values without keys
        // that refer to either Traversable classes or Zend\Loader\PluginClassLoader
        // instances as well.
        'helper_map' => array(
            'foo' => 'My\Helper\Foo',      // name/class pair
            'Zend\Form\View\HelperLoader', // additional helper loader to seed
        ),

        // Base URL path to the application
        'base_path' => $stringBasePath,

        // Doctype with which to seed the Doctype helper
        'doctype' => $doctypeHelperConstantString, // e.g. HTML5, XHTML1

        // TemplateMapResolver configuration
        // template/path pairs
        'template_map' => array(
        ),

        // TemplatePathStack configuration
        // module/view script path pairs
        'template_path_stack' => array(
        ),

        // Layout template name
        'layout' => $layoutTemplateName, // e.g., 'layout/layout'

        // ExceptionStrategy configuration
        'display_exceptions' => $bool, // display exceptions in template
        'exception_template' => $stringTemplateName, // e.g. 'error'

        // RouteNotFoundStrategy configuration
        'display_not_found_reason' => $bool, // display 404 reason in template
        'not_found_template' => $stringTemplateName, // e.g. '404'

        // Additional strategies to attach
        // These should be class names or service names of View strategy classes
        // that act as ListenerAggregates. They will be attached at priority 100, 
        // in the order registered.
        'strategies' => array(
            'ViewJsonStrategy', // register JSON renderer strategy
            'ViewFeedStrategy', // register Feed renderer strategy
        ),
    ),
);
]]></programlisting>
  </section>
</section>
