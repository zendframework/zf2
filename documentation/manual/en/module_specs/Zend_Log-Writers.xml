<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.log.writers"><title>Writers</title>
    

    <para>
        A Writer is an object that inherits from <classname>Zend\Log\Writer\AbstractWriter</classname>.
        A Writer's responsibility is to record log data to a storage backend.
    </para>

    <section xml:id="zend.log.writers.stream"><title>Writing to Streams</title>
        

        <para>
            <classname>Zend\Log\Writer\Stream</classname> sends log
            data to a <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/stream">PHP stream</link>.
        </para>

        <para>
            To write log data to the <acronym>PHP</acronym> output buffer, use the URL
            <filename>php://output</filename>. Alternatively, you can send log data directly to a
            stream like <constant>STDERR</constant> (<filename>php://stderr</filename>).
        </para>

        <programlisting language="php"><![CDATA[
$writer = new Zend\Log\Writer\Stream('php://output');
$logger = new Zend\Log\Logger($writer);

$logger->info('Informational message');
]]></programlisting>

        <para>
            To write data to a file, use one of the
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/manual/en/wrappers.php#wrappers.file">Filesystem
            URLs</link>:
        </para>

        <programlisting language="php"><![CDATA[
$writer = new Zend\Log\Writer\Stream('/path/to/logfile');
$logger = new Zend\Log\Logger($writer);

$logger->info('Informational message');
]]></programlisting>

        <para>
            By default, the stream opens in the append mode ("a").
            To open it with a different mode, the <classname>Zend\Log\Writer\Stream</classname>
            constructor accepts an optional second parameter for the mode.
        </para>

        <para>
            The constructor of <classname>Zend\Log\Writer\Stream</classname> also accepts an
            existing stream resource:
        </para>

        <programlisting language="php"><![CDATA[
$stream = @fopen('/path/to/logfile', 'a', false);
if (! $stream) {
    throw new Exception('Failed to open stream');
}

$writer = new Zend\Log\Writer\Stream($stream);
$logger = new Zend\Log\Logger($writer);

$logger->info('Informational message');
]]></programlisting>

        <para>
            You cannot specify the mode for existing stream resources. Doing so
            causes a <classname>Zend\Log\Exception</classname> to be thrown.
        </para>
    </section>

    <section xml:id="zend.log.writers.database"><title>Writing to Databases</title>
        

        <para>
            <classname>Zend\Log\Writer\Db</classname> writes log information to a database table
            using <classname>Zend\Db\Adapter\Adapter</classname>. The constructor of
            <classname>Zend\Log\Writer\Db</classname> receives a
            <classname>Zend\Db\Adapter\Adapter</classname> instance, a table name, an optional mapping of event data
            to database columns, and an optional string contains the character separator for the log array:
        </para>

        <programlisting language="php"><![CDATA[
$dbconfig = array(
    // Sqlite Configuration
    'driver' => 'Pdo',
    'dsn' => 'sqlite:' . __DIR__ . '/tmp/sqlite.db',
);
$db = new Zend\Db\Adapter\Adapter($dbconfig);

$writer = new Zend\Log\Writer\Db($db, 'log_table_name');
$logger = new Zend\Log\Logger($writer);

$logger->info('Informational message');
]]></programlisting>

        <para>
            The example above writes a single row of log data to the database table named
            'log_table_name' table. The database column will be created according to the event array
            generated by the <classname>Zend\Log\Logger</classname> instance.
        </para>
        
        <para>
            If we specify the mapping of the events with the database columns the log will
            store in the database only the selected fields.
        </para>
        
        <programlisting language="php"><![CDATA[
$dbconfig = array(
    // Sqlite Configuration
    'driver' => 'Pdo',
    'dsn' => 'sqlite:' . __DIR__ . '/tmp/sqlite.db',
);
$db = new Zend\Db\Adapter\Adapter($dbconfig);

$mapping = array(
    'timestamp' => 'date',
    'priority'  => 'type',
    'message'   => 'event'
);
$writer = new Zend\Log\Writer\Db($db, 'log_table_name', $mapping);
$logger = new Zend\Log\Logger($writer);

$logger->info('Informational message');
]]></programlisting>

        <para>
            The previous example will store only the log information timestamp, priority and message
            in the database fields date, type and event.
        </para>
        
        <para>
            The <classname>Zend\Log\Writer\Db</classname> has a second optional parameter in the constructor.
            This parameter is the character separator for the log events managed by an array. For instance, if
            we have a log that contains an array extra fields, this will be translated in 'extra-field',
            where '-' is the character separator (default) and field is the subname of the specific extra field.
        </para>
        
    </section>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_Log-Writers-Mail.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_Log-Writers-Syslog.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_Log-Writers-ZendMonitor.xml"/>

    <section xml:id="zend.log.writers.null"><title>Stubbing Out the Writer</title>
        

        <para>
            The <classname>Zend\Log\Writer\Null</classname> is a stub that does not write log data
            to anything. It is useful for disabling logging or stubbing out logging during tests:
        </para>

        <programlisting language="php"><![CDATA[
$writer = new Zend\Log\Writer\Null;
$logger = new Zend\Log\Logger($writer);

// goes nowhere
$logger->info('Informational message');
]]></programlisting>
    </section>

    <section xml:id="zend.log.writers.mock"><title>Testing with the Mock</title>
        

        <para>
            The <classname>Zend\Log\Writer\Mock</classname> is a very simple writer that records
            the raw data it receives in an array exposed as a public property.
        </para>

        <programlisting language="php"><![CDATA[
$mock = new Zend\Log\Writer\Mock;
$logger = new Zend\Log\Logger($mock);

$logger->info('Informational message');

var_dump($mock->events[0]);

// Array
// (
//    [timestamp] => 2007-04-06T07:16:37-07:00
//    [message] => Informational message
//    [priority] => 6
//    [priorityName] => INFO
// )
]]></programlisting>

        <para>
            To clear the events logged by the mock, simply set
            <command>$mock-&gt;events = array()</command>.
        </para>
    </section>

    <section xml:id="zend.log.writers.compositing"><title>Compositing Writers</title>
        

        <para>
            There is no composite Writer object. However, a Log instance can write
            to any number of Writers. To do this, use the <methodname>addWriter()</methodname>
            method:
        </para>

        <programlisting language="php"><![CDATA[
$writer1 = new Zend\Log\Writer\Stream('/path/to/first/logfile');
$writer2 = new Zend\Log\Writer\Stream('/path/to/second/logfile');

$logger = new Zend\Log\Logger();
$logger->addWriter($writer1);
$logger->addWriter($writer2);

// goes to both writers
$logger->info('Informational message');
]]></programlisting>

        <para>
            You can also specify the priority number for each writer to change the order
            of writing. The priority number is an integer number passed as second parameter in
            the <methodname>addWriter()</methodname> method.
        </para>
    </section>
</section>
