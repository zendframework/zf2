<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.view.php-renderer.scripts">
    <title>PhpRenderer View Scripts</title>

    <para>
        Once you call <methodname>render()</methodname>,
        <classname>Zend\View\Renderer\PhpRenderer</classname> then <function xlink:href="http://php.net/include">include()</function>s
        the requested view script and executes it "inside" the scope of the
        <classname>PhpRenderer</classname> instance. Therefore, in your view scripts, references to
        <varname>$this</varname> actually point to the <classname>PhpRenderer</classname> instance
        itself.
    </para>

    <para>
        Variables assigned to the view -- either via a <link linkend="zend.view.model">View
            Model</link>, <link linkend="zend.view.variables">Variables container</link>, or simply
        by passing an array of variables to <methodname>render()</methodname> -- may be retrieved in
        three ways:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                Explicitly, by retrieving them from the <classname>Variables</classname> container
                composed in the <classname>PhpRenderer</classname>:
                <code>$this-&gt;vars()-&gt;varname</code>.
            </para>
        </listitem>

        <listitem>
            <para>
                As instance properties of the <classname>PhpRenderer</classname> instance:
                <code>$this-&gt;varname</code>. (In this situation, instance property access is
                simply proxying to the composed <classname>Variables</classname> instance.)
            </para>
        </listitem>

        <listitem>
            <para>
                As local PHP variables: <code>$varname</code>. The
                <classname>PhpRenderer</classname> extracts the members of the
                <classname>Variables</classname> container locally.
            </para>
        </listitem>
    </itemizedlist>

    <para>
        We generally recommend using the second notation, as it's less verbose than the first, but
        differentiates between variables in the view script scope and those assigned to the renderer
        from elsewhere.
    </para>

    <para>
        By way of reminder, here is the example view script from the
        <classname>PhpRenderer</classname> introduction.
    </para>

    <programlisting language="php"><![CDATA[
<?php if ($this->books): ?>

    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>

        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escapeHtml($val['author']) ?></td>
            <td><?php echo $this->escapeHtml($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>

    </table>

<?php else: ?>

    <p>There are no books to display.</p>

<?php endif;?>
]]></programlisting>

    <section xml:id="zend.view.php-renderer.scripts.escaping">
        <title>Escaping Output</title>

        <para>
            One of the most important tasks to perform in a view script is to make sure that output
            is escaped properly; among other things, this helps to avoid cross-site scripting
            attacks.  Unless you are using a function, method, or helper that does escaping on its
            own, you should always escape variables when you output them and pay careful attention
            to applying the correct escaping strategy to each HTML context you use.
        </para>

        <para>
            The <classname>PhpRenderer</classname> includes a selection of helpers you can use for
            this purpose: <classname>EscapeHtml</classname>, <classname>EscapeHtmlAttr</classname>
            <classname>EscapeJs</classname>, <classname>EscapeCss</classname>, and
            <classname>EscapeUrl</classname>. Matching the correct helper (or combination of
            helpers) to the context into which you are injecting untrusted variables will ensure
            that you are protected against Cross-Site Scripting (XSS) vulnerabilities. 
        </para>

        <programlisting language="php"><![CDATA[
// bad view-script practice:
echo $this->variable;

// good view-script practice:
echo $this->escapeHtml($this->variable);

// and remember context is always relevant!
<script type="text/javascript">
    var foo = "<?php echo $this->escapeJs($variable) ?>";
</script>
]]></programlisting>

    </section>
</section>
