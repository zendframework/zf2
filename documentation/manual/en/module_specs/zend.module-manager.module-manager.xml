<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.module-manager.module-manager">

        <title>The Module Manager</title>


    <para>
        The module manager, <classname>Zend\ModuleManager\ModuleManager</classname>, is a very
        simple class which is responsible for iterating over an array of module names and triggering
        a sequence of events for each. Instantiation of module classes, initialization tasks, and
        configuration are all performed by attached event listeners.
    </para>

    <section xml:id="zend.module-manager.module-manager.module-manager-events">

            <title>Module Manager Events</title>


        <variablelist>
            <title>Events triggered by <classname>Zend\ModuleManager\ModuleManager</classname></title>

            <varlistentry>
                <term>loadModules</term>

                <listitem>
                    <para>
                        This event is primarily used internally to help encapsulate the work of
                        loading modules in event listeners, and allow the loadModules.post event to
                        be more user-friendly. Internal listeners will attach to this event with a
                        negative priority instead of loadModules.post so that users can safely
                        assume things like config merging have been done once loadModules.post is
                        triggered, without having to worry about priorities at all.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>loadModule.resolve</term>

                <listitem>
                    <para>
                        Triggered for each module that is to be loaded.  The listener(s) to this
                        event are responsible for taking a module name and resolving it to an
                        instance of some class. The default module resolver shipped with ZF2 simply
                        looks for the class <classname>{modulename}\Module</classname>,
                        instantiating and returning it if it exists.
                    </para>

                    <para>
                        The name of the module may be retrieved by listeners using the
                        <methodname>getModuleName()</methodname> method of the
                        <classname>Event</classname> object; a listener should then take that name
                        and resolve it to an object instance representing the given module. Multiple
                        listeners can be attached to this event, and the module manager will trigger
                        them in order of their priority until one returns an object. This allows you
                        to attach additional listeners which have alternative methods of resolving
                        modules from a given module name.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>loadModule</term>

                <listitem>
                    <para>
                        Once a module resolver listener has resolved the module name to an object,
                        the module manager then triggers this event, passing the newly created
                        object to all listeners.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>loadModules.post</term>

                <listitem>
                    <para>
                        This event is triggered by the module manager to allow any listeners to
                        perform work after every module has finished loading. For example, the
                        default configuration listener,
                        <classname>Zend\ModuleManager\Listener\ConfigListener</classname> (covered later),
                        attaches to this event to merge additional user-supplied configuration which
                        is meant to override the default supplied configurations of installed
                        modules.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section xml:id="zend.module-manager.module-manager.module-manager-listeners">

            <title>Module Manager Listeners</title>


        <para>
            By default, Zend Framework provides several useful module manager listeners.
        </para>

        <variablelist>
            <title>Provided Module Manager Listeners</title>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\DefaultListenerAggregate</classname></term>

                <listitem>
                    <para>
                        To help simplify the most common use case of the module manager, ZF2
                        provides this default aggregate listener.  In most cases, this will be the
                        only listener you will need to attach to use the module manager, as it will
                        take care of properly attaching the requisite listeners (those listed below)
                        for the module system to function properly.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\AutoloaderListener</classname></term>

                <listitem>
                    <para>
                        This listener checks each module to see if it has implemented
                        <classname>Zend\ModuleManager\Feature\AutoloaderProviderInterface</classname>
                        or simply defined the <methodname>getAutoloaderConfig()</methodname> method. If
                        so, it calls the <methodname>getAutoloaderConfig()</methodname> method on
                        the module class and passes the returned array to
                        <classname>Zend\Loader\AutoloaderFactory</classname>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\ConfigListener</classname></term>

                <listitem>
                    <para>
                        If a module class has a <methodname>getConfig()</methodname> method, this
                        listener will call it and merge the returned array (or
                        <classname>Traversable</classname> object) into the main application
                        configuration.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\InitTrigger</classname></term>

                <listitem>
                    <para>
                        If a module class either implements
                        <classname>Zend\ModuleManager\Feature\InitProviderInterface</classname>, or
                        simply defines an <methodname>init()</methodname> method, this
                        listener will call <methodname>init()</methodname> and pass the current instance of
                        <classname>Zend\ModuleManager\ModuleManager</classname> as the sole parameter. The
                        <methodname>init()</methodname> method is called for
                        <emphasis>every</emphasis> module implementing this feature, on
                        <emphasis>every</emphasis> page request and should <emphasis>only</emphasis>
                        be used for performing <emphasis>lightweight</emphasis> tasks such as
                        registering event listeners.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\LocatorRegistrationListener</classname></term>

                <listitem>
                    <para>
                        If a module class implements
                        <classname>Zend\ModuleManager\Feature\LocatorRegisteredInterface</classname>, this
                        listener will inject the module class instance into the
                        <classname>ServiceManager</classname> using the module class name as the
                        service name. This allows you to later retrieve the module class from the
                        <classname>ServiceManager</classname>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\ModuleResolverListener</classname></term>

                <listitem>
                    <para>
                        This is the default module resolver. It attaches to the "loadModule.resolve"
                        event and simply returns an instance of
                        <classname>{moduleName}\Module</classname>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\OnBootstrapListener</classname></term>

                <listitem>
                    <para>
                        If a module class implements
                        <classname>Zend\ModuleManager\Feature\BootstrapListenerInterface</classname>,
                        or simply defines an <methodname>onBootstrap()</methodname> method, this
                        listener will register the <methodname>onBootstrap()</methodname> method
                        with the <classname>Zend\Mvc\Application</classname>
                        <varname>bootstrap</varname> event. This method will then be triggered
                        during the <varname>bootstrap</varname> event (and passed an
                        <classname>MvcEvent</classname> instance).
                    </para>

                    <para>
                        Like the <classname>InitTrigger</classname>, the
                        <methodname>onBootstrap()</methodname> method is called for
                        <emphasis>every</emphasis> module implementing this feature, on
                        <emphasis>every</emphasis> page request, and should
                        <emphasis>only</emphasis> be used for performing
                        <emphasis>lightweight</emphasis> tasks such as registering event listeners.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><classname>Zend\ModuleManager\Listener\ServiceListener</classname></term>

                <listitem>
                    <para>
                        If a module class implements
                        <classname>Zend\ModuleManager\Feature\ServiceProviderInterface</classname>,
                        or simply defines an <methodname>getServiceConfiguration()</methodname> method, this
                        listener will call that method and aggregate the return values for use in
                        configuring the <classname>ServiceManager</classname>.
                    </para>

                    <para>
                        The <methodname>getServiceConfiguration()</methodname> method may return
                        either an array of configuration compatible with
                        <classname>Zend\ServiceManager\Configuration</classname>, an instance of
                        that class, or the string name of a class that extends it. Values are merged
                        and aggregated on completion, and then merged with any configuration from
                        the <classname>ConfigListener</classname> falling
                        under the <varname>service_manager</varname> key. For more information, see
                        the <classname linkend="zend.service-manager">ServiceManager</classname>
                        documentation.
                    </para>

                    <para>
                        Unlike the other listeners, this listener is not managed by the
                        <classname>DefaultListenerAggregate</classname>; instead, it is created and
                        instantiated within the
                        <classname>Zend\Mvc\Service\ModuleManagerFactory</classname>, where it is
                        injected with the current <classname>ServiceManager</classname> instance
                        before being registered with the <classname>ModuleManager</classname> events.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
</section>
