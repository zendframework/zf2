<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xml:id="zend.mvc.examples">
  <title>Examples</title>

  <section xml:id="zend.mvc.examples.controllers">
    <title>Controllers</title>

    <section xml:id="zend.mvc.examples.controllers.accessing-the-request-and-response">
      <title>Accessing the Request and Response</title>

      <para>
        When using <classname>AbstractActionController</classname> or
        <classname>AbstractRestfulController</classname>, the request and response
        object are composed directly into the controller as soon as
        <methodname>dispatch()</methodname> is called. You may access them in the
        following ways:
      </para>

      <programlisting language="php"><![CDATA[
// Using explicit accessor methods
$request  = $this->getRequest();
$response = $this->getResponse();

// Using direct property access
$request  = $this->request;
$response = $this->response;
]]></programlisting>

      <para>
        Additionally, if your controller implements
        <classname>InjectApplicationEventInterface</classname> (as both
        <classname>AbstractActionController</classname> and
        <classname>AbstractRestfulController</classname> do), you can access these
        objects from the attached <classname>MvcEvent</classname>:
      </para>

      <programlisting language="php"><![CDATA[
$event    = $this->getEvent();
$request  = $event->getRequest();
$response = $event->getResponse();
]]></programlisting>

      <para>
        The above can be useful when composing event listeners into your
        controller.
      </para>
    </section>

    <section xml:id="zend.mvc.examples.controllers.accessing-routing-parameters">
      <title>Accessing routing parameters</title>

      <para>
        The parameters returned when routing completes are wrapped in a
        <classname>Zend\Mvc\Router\RouteMatch</classname> object. This object
        is detailed in the section on routing.
      </para>

      <para>
        Within your controller, if you implement
        <classname>InjectApplicationEventInterface</classname> (as both
        <classname>AbstractActionController</classname> and
        <classname>AbstractRestfulController</classname> do), you can access this
        object from the attached <classname>MvcEvent</classname>:
      </para>

      <programlisting language="php"><![CDATA[
$event   = $this->getEvent();
$matches = $event->getRouteMatch();
]]></programlisting>

      <para>
        Once you have the <classname>RouteMatch</classname> object, you can
        pull parameters from it.
      </para>
    </section>

    <section xml:id="zend.mvc.examples.controllers.returning-early">
      <title>Returning early</title>

      <para>
        You can effectively short-circuit execution of the application at
        any point by returning a <classname>Response</classname> from your
        controller or any event. When such a value is discovered, it halts
        further execution of the event manager, bubbling up to the
        <classname>Application</classname> instance, where it is immediately
        returned.
      </para>

      <para>
        As an example, the <classname>Redirect</classname> plugin returns a
        <classname>Response</classname>, which can be returned immediately so
        as to complete the request as quickly as possible. Other use cases
        might be for returning JSON or XML results from web service
        endpoints, returning "401 Forbidden" results, etc.
      </para>
    </section>
  </section>

  <section xml:id="zend.mvc.examples.bootstrapping">
    <title>Bootstrapping</title>

    <section xml:id="registering-module-specific-listeners">
      <title>Registering module-specific listeners</title>

      <para>
        Often you may want module-specific listeners. As an example, this
        would be a simple and effective way to introduce authorization,
        logging, or caching into your application.
      </para>

      <para>
        Each <classname>Module</classname> class can have an optional
        <methodname>onBootstrap()</methodname> method. Typically, you'll do
        module-specific configuration here, or setup event listeners for you
        module here. The <methodname>onBootstrap()</methodname> method is called
        for <emphasis>every</emphasis> module on <emphasis>every</emphasis> page
        request and should <emphasis>only</emphasis> be used for performing
        <emphasis>lightweight</emphasis> tasks such as registering event
        listeners.
      </para>

      <para>
        The base <classname>Application</classname> class shipped with the
        framework has an <classname>EventManager</classname> associated with it,
        and once the modules are initialized, it triggers a "bootstrap" event,
        with a <methodname>getApplication()</methodname> method on the event.
      </para>

      <para>
        So, one way to accomplish module-specific listeners is to listen to that
        event, and register listeners at that time. As an example:
      </para>

      <programlisting language="php"><![CDATA[
namespace SomeCustomModule;

class Module
{
    public function onBootstrap($e)
    {
        $application = $e->getApplication();
        $config      = $application->getConfiguration();
        $view        = $application->getServiceManager()->get('View');
        $view->headTitle($config['view']['base_title']);

        $listeners   = new Listeners\ViewListener();
        $listeners->setView($view);
        $application->getEventManager()->attachAggregate($listeners);
    }
}
]]></programlisting>

      <para>
        The above demonstrates several things. First, it demonstrates a listener
        on the application's "bootstrap" event (the
        <methodname>onBootstrap()</methodname> method). Second, it demonstrates that
        listener, and how it can be used to register listeners with the
        application. It grabs the <classname>Application</classname> instance;
        from the <classname>Application</classname>, it is able to grab the attached
        service manager and configuration. These are then used to retrieve the
        view, configure some helpers, and then register a listener aggregate
        with the application event manager.
      </para>
    </section>
  </section>
</section>
