<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xml:id="zend.db.table-gateway">
    <title>Zend\Db\TableGateway</title>

    <para>
        The Table Gateway object is intended to provide an object
        that represents a table in a database, and the methods of
        this object mirror the most common operations on a database
        table.  In code, the interface for such an object looks like this:
    </para>

    <programlisting language="php"><![CDATA[
interface Zend\Db\TableGateway\TableGatewayInterface
{
    public function getTable();
    public function select($where = null);
    public function insert($set);
    public function update($set, $where = null);
    public function delete($where);
}
]]></programlisting>

    <para>
        There are two primary implementations of the <classname>TableGatewayInterface</classname>
        that are of the most useful: <classname>AbstractTableGateway</classname> and <classname>TableGateway</classname>.
        The <classname>AbstractTableGateway</classname> is an abstract basic implementation that provides
        functionality for <methodname>select()</methodname>, <methodname>insert()</methodname>, <methodname>update()</methodname>, <methodname>delete()</methodname>, as well as an
        additional API for doing these same kinds of tasks with explicit SQL
        objects.  These methods are <methodname>selectWith()</methodname>, <methodname>insertWith()</methodname>, <methodname>updateWith()</methodname>
        and <methodname>deleteWith()</methodname>.  In addition, AbstracTableGateway also implements
        a "Feature" API, that allows for expanding the behaviors of the
        base <classname>TableGateway</classname> implementation without having to extend the
        class with this new functionality. The <classname>TableGateway</classname> concrete
        implementation simply adds a sensible constructor to the <classname>AbstractTableGateway</classname>
        class so that out-of-the-box, <classname>TableGateway</classname> does not need to be extended
        in order to be consumed and utilized to its fullest.
    </para>


    <section xml:id="zend.db.table-gateway.basic">
        <title>Basic Usage</title>

        <para>
            The quickest way to get up and running with Zend\Db\TableGateway is
            to configure and utilize the concrete implementation of the <classname>TableGateway</classname>.
            The API of the concrete <classname>TableGateway</classname> is:
        </para>

        <programlisting language="php"><![CDATA[
class TableGateway extends AbstractTableGateway
{
	public $lastInsertValue;
	public $table;
	public $adapter;

	public function __construct($table, Adapter $adapter, $features = null, ResultSet $resultSetPrototype = null, Sql $sql = null)

	/** Inherited from AbstractTableGateway */

    public function isInitialized();
    public function initialize();
    public function getTable();
    public function getAdapter();
    public function getColumns();
    public function getFeatureSet();
    public function getResultSetPrototype();
    public function getSql();
    public function select($where = null);
    public function selectWith(Select $select);
    public function insert($set);
    public function insertWith(Insert $insert);
    public function update($set, $where = null);
    public function updateWith(Update $update);
    public function delete($where);
    public function deleteWith(Delete $delete);
    public function getLastInsertValue();

}
]]></programlisting>

        <para>
            The concrete <classname>TableGateway</classname> object practices constructor injection for
            getting dependencies and options into the instance.  The table name
            and an instance of an Adapter are all that is needed to setup a working
            <classname>TableGateway</classname> object.
        </para>

        <para>
            Out of the box, this implementation makes no assumptions about table
            structure or metadata, and when <methodname>select()</methodname> is executed, a simple ResultSet
            object with the populated Adapter's Result (the datasource) will be returned
            and ready for iteration.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Db\TableGateway\TableGateway;
$projectTable = new TableGateway('project', $adapter);
$rowset = $projectTable->select(array('type' => 'PHP'));

echo 'Projects of type PHP: ' .
foreach ($rowset as $projectRow) {
	echo $projectRow['name'] . PHP_EOL;
}

// or, when expecting a single row:
$artistTable = new TableGateway('artist', $adapter);
$rowset = $artistTable->select(array('id' => 2));
$artistRow = $rowset->current();

var_dump($artistRow->toArray());
]]></programlisting>

        <para>
            The <methodname>select()</methodname> method takes the same arguments as <classname>Zend\Db\Sql\Select::where()</classname>
            with the addition of also being able to accept a closure, which in turn, will
            be passed the current Select object that is being used to build the SELECT
            query.  The following usage is possible:
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Db\TableGateway\TableGateway;
use Zend\Db\Sql\Select;
$artistTable = new TableGateway('artist', $adapter);

// search for at most 2 artists who's name starts with Brit, ascending
$rowset = $artistTable->select(function (Select $select) {
	$select->where->like('name', 'Brit%');
	$select->order('name ASC')->limit(2);
});
]]></programlisting>

    </section>

    <section xml:id="zend.db.table-gateway.features">
        <title>TableGateway Features</title>

        <para>
            The Features API allows for extending the functionality of the base <classname>TableGateway</classname>
            object without having to polymorphically extend the base class.  This allows for
            a wider array of possible mixing and matching of features to achieve a particular
            behiavior that needs to be attained to make the base implementation of <classname>TableGateway</classname>
            useful for a particular problem.
        </para>

        <para>
            With the <classname>TableGateway</classname> object, features should be injected though the constructor.
            The constructor can take Features in 3 different forms: as a single feature object,
            as a FeatureSet object, or as an array of Feature objects.
        </para>

        <para>
            There are a number of features built-in and shipped with Zend\Db:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    GlobalAdapterFeature: the ability to use a global/static adapter without needing
                    to inject it into a <classname>TableGateway</classname> instance.  This is more useful when you are
                    extending the <classname>AbstractTableGateway</classname> implementation:
                </para>

                <programlisting language="php"><![CDATA[
class MyTableGateway extends <classname>AbstractTableGateway</classname>
{
	public function __construct()
	{
		$this->table = 'my_table';
		$this->featureSet = new Feature\FeatureSet();
		$this->featureSet->addFeature(new Feature\GlobalAdapterFeature());
		$this->initialize();
	}
}

// elsewhere in code, in a bootstrap
Zend\Db\TableGateway\Feature\GlobalAdapterFeature::setStaticAdapter($adapter);

// in a controller, or model somewhere
$table = new MyTableGateway(); // adapter is statially loaded
]]></programlisting>

            </listitem>
            <listitem>
                <para>
                    MasterSlaveFeature: the ability to use a master adapter for insert(), update(),
                    and delete() while using a slave adapter for all select() operations.
                </para>

                <programlisting language="php"><![CDATA[
$table = new TableGateway('artist', $adapter, new Feature\MasterSlaveFeature($slaveAdapter));
]]></programlisting>

            </listitem>

            <listitem>
                <para>
                    MetadataFeature: the ability populate <classname>TableGateway</classname> with column information from
                    a Metadata object.  It will also store the primary key information in case
                    RowGatewayFeature needs to consume this information.
                </para>

                <programlisting language="php"><![CDATA[
$table = new TableGateway('artist', $adapter, new Feature\MeatadataFeature());
]]></programlisting>

            </listitem>

            <listitem>
                <para>
                    EventFeature: the ability utilize a <classname>TableGateway</classname> object with Zend\EventManager
                    and to be able to subscribe to various events in a <classname>TableGateway</classname> lifecycle.
                </para>

                <programlisting language="php"><![CDATA[
$table = new TableGateway('artist', $adapter, new Feature\EventFeature($eventManagerInstance));
]]></programlisting>

            </listitem>

            <listitem>
                <para>
                    RowGatewayFeature: the ability for <methodname>select()</methodname> to return a ResultSet object that
                    upon iteration will
                </para>

                <programlisting language="php"><![CDATA[
$table = new TableGateway('artist', $adapter, new Feature\RowGatewayFeature('id'));
$results = $table->select(array('id' => 2));

$artistRow = $results->current();
$artistRow->name = 'New Name';
$artistRow->save();
]]></programlisting>

            </listitem>

        </itemizedlist>

    </section>

</section>
