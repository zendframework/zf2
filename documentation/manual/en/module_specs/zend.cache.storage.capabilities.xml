<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.cache.storage.capabilities">
    <info>
        <title>Zend\Cache\Storage\Capabilities</title>
    </info>

    <section xml:id="zend.cache.storage.capabilities.intro">
        <info>
            <title>Overview</title>
        </info>

        <para>
            Storage capabilities describes how a storage object works and
            which features it supports. 
        </para>

        <para>
            To get capabilities of a storage object you can use the method
            <methodname>getCapabilities</methodname> of the object but only
            the storage object and it's plug-ins has permissions to change it.
        </para>

        <para>
            Because capabilities can be changed by storage, for example on
            changing some options, you can get a note by catching the event if
            it. (TODO: link to example)
        </para>

        <para>
            If you are writing an own plug-in or adapter you also can change
            capabilities because you have access to the marker object and
            can create an own marker to instantiate a new object of
            <classname>Zend\Cache\Storage\Capabilities</classname>.
        </para>

    </section>

<!--
    <section xml:id="zend.cache.storage.capabilities.quick-start">
        <info>
            <title>Quick Start</title>
        </info>

    </section>
-->

    <section xml:id="zend.cache.storage.capabilities.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.__construct">

                <term>
                    <methodsynopsis>
                        <methodname>__construct</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, array $capabilities = array (
), null|Zend\Cache\Storage\Capabilities $baseCapabilities</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Constructor</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.has-event-manager">
                <term>
                    <methodsynopsis>
                        <methodname>hasEventManager</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Returns if the dependency of Zend\EventManager is available</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-event-manager">
                <term>
                    <methodsynopsis>
                        <methodname>getEventManager</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the event manager</para>
                    <para></para>
                    <para>Returns Zend\EventManager\EventManager</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-supported-datatypes">
                <term>
                    <methodsynopsis>
                        <methodname>getSupportedDatatypes</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get supported datatypes</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-supported-datatypes">
                <term>
                    <methodsynopsis>
                        <methodname>setSupportedDatatypes</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, array $datatypes</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set supported datatypes</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-supported-metadata">
                <term>
                    <methodsynopsis>
                        <methodname>getSupportedMetadata</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get supported metadata</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-supported-metadata">
                <term>
                    <methodsynopsis>
                        <methodname>setSupportedMetadata</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, string $metadata</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set supported metadata</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-max-ttl">
                <term>
                    <methodsynopsis>
                        <methodname>getMaxTtl</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get maximum supported time-to-live</para>
                    <para></para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-max-ttl">
                <term>
                    <methodsynopsis>
                        <methodname>setMaxTtl</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, int $maxTtl</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set maximum supported time-to-live</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-static-ttl">
                <term>
                    <methodsynopsis>
                        <methodname>getStaticTtl</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Is the time-to-live handled static (on write)</para>
                    <para>or dynamic (on read)</para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-static-ttl">
                <term>
                    <methodsynopsis>
                        <methodname>setStaticTtl</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set if the time-to-live handled static (on write) or dynamic (on read)</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-ttl-precision">
                <term>
                    <methodsynopsis>
                        <methodname>getTtlPrecision</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get time-to-live precision</para>
                    <para></para>
                    <para>Returns float</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-ttl-precision">
                <term>
                    <methodsynopsis>
                        <methodname>setTtlPrecision</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, float $ttlPrecision</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set time-to-live precision</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-use-request-time">
                <term>
                    <methodsynopsis>
                        <methodname>getUseRequestTime</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get use request time</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-use-request-time">
                <term>
                    <methodsynopsis>
                        <methodname>setUseRequestTime</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set use request time</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-expired-read">
                <term>
                    <methodsynopsis>
                        <methodname>getExpiredRead</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get if expired items are readable</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-expired-read">
                <term>
                    <methodsynopsis>
                        <methodname>setExpiredRead</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set if expired items are readable</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-max-key-length">
                <term>
                    <methodsynopsis>
                        <methodname>getMaxKeyLength</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get maximum key lenth</para>
                    <para></para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-max-key-length">
                <term>
                    <methodsynopsis>
                        <methodname>setMaxKeyLength</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, int $maxKeyLength</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set maximum key lenth</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-namespace-is-prefix">
                <term>
                    <methodsynopsis>
                        <methodname>getNamespaceIsPrefix</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get if namespace support is implemented as prefix</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-namespace-is-prefix">
                <term>
                    <methodsynopsis>
                        <methodname>setNamespaceIsPrefix</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set if namespace support is implemented as prefix</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-namespace-separator">
                <term>
                    <methodsynopsis>
                        <methodname>getNamespaceSeparator</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get namespace separator if namespace is implemented as prefix</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-namespace-separator">
                <term>
                    <methodsynopsis>
                        <methodname>setNamespaceSeparator</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, string $separator</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the namespace separator if namespace is implemented as prefix</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-iterable">
                <term>
                    <methodsynopsis>
                        <methodname>getIterable</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get if items are iterable</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-iterable">
                <term>
                    <methodsynopsis>
                        <methodname>setIterable</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set if items are iterable</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-clear-all-namespaces">
                <term>
                    <methodsynopsis>
                        <methodname>getClearAllNamespaces</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get support to clear items of all namespaces</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-clear-all-namespaces">
                <term>
                    <methodsynopsis>
                        <methodname>setClearAllNamespaces</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set support to clear items of all namespaces</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.get-clear-by-namespace">
                <term>
                    <methodsynopsis>
                        <methodname>getClearByNamespace</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get support to clear items by namespace</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.cache.storage.capabilities.methods.set-clear-by-namespace">
                <term>
                    <methodsynopsis>
                        <methodname>setClearByNamespace</methodname>
                        <methodparam>
                            <funcparams>stdClass $marker, boolean $flag</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set support to clear items by namespace</para>
                    <para></para>
                    <para>Returns Zend\Cache\Storage\Capabilities</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>

    <section xml:id="zend.cache.storage.capabilities.examples">
        <info>
            <title>Examples</title>
        </info>

        <example xml:id="zend.cache.storage.capabilities.examples.spezific">
            <info><title>Get storage capabilities and do spezific stuff in base of it</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\StorageFactory;

$cache = StorageFactory::adapterFactory('filesystem');
$capabilities = $cache->getCapabilities();

// now you can run spezific stuff in base of supported feature
if ($capabilities->getIterable()) {
    $cache->find()
    while ( ($item => $cache->fetch()) ) {
        echo $item['key'] . ': ' . $item['value'] . "\n";
    }
} else {
    echo 'Iterating cached items not supported.'
}

]]></programlisting>
        </example>

        <example xml:id="zend.cache.storage.capabilities.examples.event.change">
            <info><title>Get note on changed capability</title></info>

            <programlisting language="php"><![CDATA[
use Zend\Cache\StorageFactory;

$cache = StorageFactory::adapterFactory('filesystem', array(
    'no_atime' => false,
));
$capabilities = $cache->getCapabilities();

// Catching the change event
$capabilities->events()->attach('change', function () {
    echo 'Capabilities changed';
});

// change option which changes capabilities
$cache->getOptions()->setNoATime(true);

/** Will output:
Capabilities changed
*/
]]></programlisting>
        </example>

    </section>
</section>
