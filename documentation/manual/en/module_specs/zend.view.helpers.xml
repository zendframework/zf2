<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xml:id="zend.view.helpers">
    <title>View Helpers</title>

    <para>
        In your view scripts, often it is necessary to perform certain complex functions over and
        over: e.g., formatting a date, generating form elements, or displaying action links. You can
        use helper, or plugin, classes to perform these behaviors for you.
    </para>

    <para>
        A helper is simply a class that implements the interface <classname>Zend\View\Helper</classname>. 
        <classname>Helper</classname> simply defines two methods,
        <methodname>setView()</methodname>, which accepts a
        <classname>Zend\View\Renderer</classname> instance/implementation, and
        <methodname>getView()</methodname>, used to retrieve that instance.
        <classname>Zend\View\PhpRenderer</classname> composes a <link
            linkend="zend.loader.plugin-broker">plugin broker</link>, allowing you to
        retrieve helpers, and also provides some method overloading capabilities that allow proxying
        method calls to helpers.
    </para>

    <para>
        As an example, let's say we have a helper class named
        <classname>My\Helper\LowerCase</classname>, which we map in our plugin broker to the name
        "lowercase". We can retrieve or invoke it in one of the following ways:
    </para>

    <programlisting language="php"><![CDATA[
// $view is a PhpRenderer instance

// Via the plugin broker:
$broker = $view->getBroker();
$helper = $broker->load('lowercase');

// Retrieve the helper instance, via the method "plugin", 
// which proxies to the plugin broker:
$helper = $view->plugin('lowercase');

// If the helper does not define __invoke(), the following also retrieves it:
$helper = $view->lowercase();

// If the helper DOES define __invoke, you can call the helper 
// as if it is a method:
$filtered = $view->lowercase('some value');
]]></programlisting>

    <para>
        The last two examples demonstrate how the <classname>PhpRenderer</classname> uses method
        overloading to retrieve and/or invoke helpers directly, offering a convenience API for end
        users.
    </para>
        
    <para>
        A large number of helpers are provided in the standard distribution of Zend Framework.  You
        can also register helpers by adding them to the <link
            linkend="zend.loader.plugin-broker">plugin broker</link>, or the plugin locator the
        broker composes. Please refer to the <link linkend="zend.loader.plugin-broker">plugin broker
            documentation</link> for details.
    </para>

    <section xml:id="zend.view.helpers.initial">
        <title>Included Helpers</title>

        <para>
            Zend Framework comes with an initial set of helper classes. In particular, there are
            helpers for creating route-based <acronym>URL</acronym>s and <acronym>HTML</acronym>
            lists, as well as declaring variables. Additionally, there are a rich set of helpers for
            providing values for, and rendering, the various HTML <code>&lt;head&gt;</code> tags,
            such as <classname>HeadTitle</classname>, <classname>HeadLink</classname>, and
            <classname>HeadScript</classname>. The currently shipped helpers include:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <methodname>url($urlOptions, $name, $reset)</methodname>: Creates a
                    <acronym>URL</acronym> string based on a named route.
                    <varname>$urlOptions</varname> should be an associative array of key/value pairs
                    used by the particular route.
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>htmlList($items, $ordered, $attribs, $escape)</methodname>:
                    generates unordered and ordered lists based on the <varname>$items</varname>
                    passed to it. If <varname>$items</varname> is a multidimensional
                    array, a nested list will be built. If the <varname>$escape</varname>
                    flag is <constant>TRUE</constant> (default), individual items will be escaped
                    using the view objects registered escaping mechanisms; pass a
                    <constant>FALSE</constant> value if you want to allow markup in your lists.
                </para>
            </listitem>
        </itemizedlist>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Action.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-BaseUrl.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Cycle.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Partial.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Placeholder.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Doctype.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HeadLink.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HeadMeta.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HeadScript.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HeadStyle.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HeadTitle.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-HtmlObject.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-InlineScript.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Json.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_View-Helpers-Navigation.xml"/>
    </section>

    <section xml:id="zend.view.helpers.register">
        <title>Registering Helpers</title>

        <para>
            <classname>Zend\View\Renderer\PhpRenderer</classname> composes a <link
                linkend="zend.loader.plugin-broker">plugin broker</link> for managing helpers,
            specifically an instance of <classname>Zend\View\HelperBroker</classname>, which extends
            the base plugin broker in order to ensure we have valid helpers available. The
            <classname>HelperBroker</classname> by default uses
            <classname>Zend\View\HelperLoader</classname> as its helper locator. The
            <classname>HelperLoader</classname> is a map-based loader, which means that you will
            simply map the helper/plugin name by which you wish to refer to it to the actual class
            name of the helper/plugin.
        </para>

        <para>
            Programmatically, this is done as follows:
        </para>

        <programlisting language="php"><![CDATA[
// $view is an instance of PhpRenderer
$broker = $view->getBroker();
$loader = $broker->getClassLoader();

// Register singly:
$loader->registerPlugin('lowercase', 'My\Helper\LowerCase');

// Register several:
$loader->registerPlugins(array(
    'lowercase' => 'My\Helper\LowerCase',
    'uppercase' => 'My\Helper\UpperCase',
));
]]></programlisting>

        <para>
            Within an MVC application, you will typically simply pass a map of plugins to the class
            via your configuration.
        </para>

        <programlisting language="php"><![CDATA[
// From within a configuration file
return array(
    'di' => array('instance' => array(
        'Zend\View\HelperLoader' => array('parameters' => array(
            'map' => array(
                'lowercase' => 'My\Helper\LowerCase',
                'uppercase' => 'My\Helper\UpperCase',
            ),
        )),
    )),
);
]]></programlisting>

        <para>
            The above can be done in each module that needs to register helpers with the
            <classname>PhpRenderer</classname>; however, be aware that another module can register
            helpers with the same name, so order of modules can impact which helper class will
            actually be registered!
        </para>

    </section>

    <section xml:id="zend.view.helpers.custom">
        <title>Writing Custom Helpers</title>

        <para>
            Writing custom helpers is easy. We recommend extending
            <classname>Zend\View\Helper\AbstractHelper</classname>, but at the minimum, you need
            only implement the <classname>Zend\View\Helper</classname> interface:
        </para>

        <programlisting language="php"><![CDATA[
namespace Zend\View;

interface Helper
{
    /**
     * Set the View object
     *
     * @param  Renderer $view
     * @return Helper
     */
    public function setView(Renderer $view);

    /**
     * Get the View object
     *
     * @return Renderer
     */
    public function getView();
}
]]></programlisting>

        <para>
            If you want your helper to be capable of being invoked as if it were a method call of
            the <classname>PhpRenderer</classname>, you should also implement an
            <methodname>__invoke()</methodname> method within your helper.
        </para>

        <para>
            As previously noted, we recommend extending
            <classname>Zend\View\Helper\AbstractHelper</classname>, as it implements the methods
            defined in <classname>Helper</classname>, giving you a headstart in your development.
        </para>

        <para>
            Once you have defined your helper class, make sure you can autoload it, and then <link
                linkend="zend.view.helpers.register">register it with the plugin broker</link>.
        </para>

        <para>
            Here is an example helper, which we're titling "SpecialPurpose"
        </para>

        <programlisting language="php"><![CDATA[
namespace My\View\Helper;

use Zend\View\Helper\AbstractHelper;

class SpecialPurpose extends AbstractHelper
{
    protected $count = 0;

    public function __invoke()
    {
        $this->count++;
        $output = sprintf("I have seen 'The Jerk' %d time(s).", $this->count);
        return htmlspecialchars($output, ENT_QUOTES, 'UTF-8');
    }
}
]]></programlisting>

        <para>
            Then assume that when we <link
                linkend="zend.view.helpers.register">register it with the plugin broker</link>, we
            map it to the string "specialpurpose".
        </para>

        <para>
            Within a view script, you can call the <classname>SpecialPurpose</classname> helper as
            many times as you like; it will be instantiated once, and then it persists for the life
            of that <classname>PhpRenderer</classname> instance.
        </para>

        <programlisting language="php"><![CDATA[
// remember, in a view script, $this refers to the Zend_View instance.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
]]></programlisting>

        <para>
            The output would look something like this:
        </para>

        <programlisting language="php"><![CDATA[
I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).
]]></programlisting>

        <para>
            Sometimes you will need access to the calling <classname>PhpRenderer</classname> object --
            for instance, if you need to use the registered encoding, or want to render another view
            script as part of your helper. This is why we define the
            <methodname>setView()</methodname> and <methodname>getView()</methodname> methods. As an
            example, we could rewrite the <classname>SpecialPurpose</classname> helper as follows to
            take advantage of the <classname>Escape</classname> helper:
        </para>

        <programlisting language="php"><![CDATA[
namespace My\View\Helper;

use Zend\View\Helper\AbstractHelper;

class SpecialPurpose extends AbstractHelper
{
    protected $count = 0;

    public function __invoke()
    {
        $this->count++;
        $output  = sprintf("I have seen 'The Jerk' %d time(s).", $this->count);
        $escaper = $this->getView()->plugin('escape');
        return $escaper($output);
    }
}
]]></programlisting>
    </section>

    <section xml:id="zend.view.helpers.registering-concrete">
        <title>Registering Concrete Helpers</title>

        <para>
            Sometimes it is convenient to instantiate a view helper, and then register it with the
            renderer. This can be done by injecting it directly into the plugin broker.
        </para>

        <programlisting language="php"><![CDATA[
// $view is a PhpRenderer instance

$helper = new My_Helper_Foo();
// ...do some configuration or dependency injection...

$view->getBroker()->register('foo', $helper);
]]></programlisting>

        <para>
            When registered, the plugin broker will inject the <classname>PhpRenderer</classname>
            instance into the helper.
        </para>
    </section>
</section>
