<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.service-manager.quick-start">
    <info><title>Zend\ServiceManager Quick Start</title></info>

    <para>
        By default, Zend Framework utilizes <classname>Zend\ServiceManager</classname> within the
        MVC layer. As such, in most cases you'll be providing services, invokable classes, aliases,
        and factories either via configuration or via your module classes.
    </para>

    <para>
        By default, the module manager listener
        <classname>Zend\ModuleManager\Listener\ServiceListener</classname> will do the following:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                For modules implementing the
                <classname>Zend\ModuleManager\Feature\ServiceProvider</classname> interface, or the
                <methodname>getServiceConfiguration()</methodname> method, it will call that method
                and merge the configuration.
            </para>
        </listitem>

        <listitem>
            <para>
                After all modules have been processed, it will grab the configuration from the
                registered <classname>Zend\ModuleManager\Feature\ConfigListener</classname>, and
                merge any configuration under the <varname>service_manager</varname> key.
            </para>
        </listitem>

        <listitem>
            <para>
                Finally, it will use the merged configuration to configure the
                <classname>ServiceManager</classname>.
            </para>
        </listitem>
    </itemizedlist>

    <para>
        In most cases, you won't interact with the <classname>ServiceManager</classname>, other than
        to provide services to it; your application will typically rely on good configuration in the
        <classname>ServiceManager</classname> to ensure that classes are configured correctly with
        their dependencies. When creating factories, however, you may want to interact with the
        <classname>ServiceManager</classname> to retrieve other services to inject as dependencies.
        Additionally, there are some cases where you may want to receive the
        <classname>ServiceManager</classname> to lazy-retrieve dependencies; as such, you'll want to
        implement <classname>ServiceManagerAwareInterface</classname>, and learn the API of the
        <classname>ServiceManager</classname>.
    </para>

    <section xml:id="zend.service-manager.quick-start.config">
        <info><title>Using Configuration</title></info>

        <para>
            Configuration requires a <varname>service_manager</varname> key at the top level of your
            configuration, with one or more of the following sub-keys:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="strong">abstract_factories</emphasis>, which should be an array
                    of abstract factory class names.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">aliases</emphasis>, which should be an associative array
                    of alias name/target name pairs (where the target name may also be an alias).
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">factories</emphasis>, an array of service name/factory
                    class name pairs. The factories should be either classes implementing
                    <classname>Zend\ServiceManager\FactoryInterface</classname> or invokable
                    classes. If you are using PHP configuration files, you may provide any PHP
                    callable as the factory.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">invokables</emphasis>, an array of service name/class
                    name pairs. The class name should be class that may be directly instantiated
                    without any constructor arguments.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">services</emphasis>, an array of service name/object
                    pairs. Clearly, this will only work with PHP configuration.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">shared</emphasis>, an array of service name/boolean
                    pairs, indicating whether or not a service should be shared. By default, the
                    <classname>ServiceManager</classname> assumes all services are shared, but you
                    may specify a boolean false value here to indicate a new instance should be
                    returned.
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="zend.service-manager.quick-start.module">
        <info><title>Modules as Service Providers</title></info>

        <para>
            Modules may act as service configuration providers. To do so, the Module class must
            either implement <classname>Zend\ModuleManager\Feature\ServiceProviderInterface</classname> 
            or simply the method <methodname>getServiceConfiguration()</methodname> (which is also
            defined in the interface).  This method must return one of the following:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    An array (or <classname>Traversable</classname> object) of configuration
                    compatible with <classname>Zend\ServiceManager\Configuration</classname>.
                    (Basically, it should have the keys for configuration as discussed in <link
                        linkend="zend.service-manager.quick-start.config">the previous
                        section</link>.
                </para>
            </listitem>

            <listitem>
                <para>
                    A string providing the name of a class implementing
                    <classname>Zend\ServiceManager\ConfigurationInterface</classname>.
                </para>
            </listitem>

            <listitem>
                <para>
                    An instance of either <classname>Zend\ServiceManager\Configuration</classname>,
                    or an object implementing
                    <classname>Zend\ServiceManager\ConfigurationInterface</classname>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            As noted previously, this configuration will be merged with the configuration returned
            from other modules as well as configuration files, prior to being passed to the
            <classname>ServiceManager</classname>; this allows overriding configuration from modules
            easily.
        </para>
    </section>

    <section xml:id="zend.service-manager.quick-start.examples">
        <info><title>Examples</title></info>

        <example xml:id="zend.service-manager.quick-start.examples.config-array">
            <info><title>Sample configuration</title></info>

            <para>
                The following is valid configuration for any configuration being merged in your
                application, and demonstrates each of the possible configuration keys. Configuration
                is merged in the following order:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Configuration returned from Module classes via the
                        <methodname>getServiceConfiguration()</methodname> method, in the order in
                        which modules are processed.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Module configuration under the <varname>service_manager</varname> key, in
                        the order in which modules are processed.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Application configuration under the <filename>config/autoload/</filename>
                        directory, in the order in which they are processed.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                As such, you have a variety of ways to override service manager configuration
                settings.
            </para>

            <programlisting language="php"><![CDATA[
<?php
// a module configuration, "module/SomeModule/config/module.config.php"
return array(
    'service_manager' => array(
        'abstract_factories' => array(
            // Valid values include names of classes implementing 
            // AbstractFactoryInterface, instances of classes implementing 
            // AbstractFactoryInterface, or any PHP callbacks
            'SomeModule\Service\FallbackFactory',
        ),
        'aliases' => array(
            // Aliasing a FQCN to a service name
            'SomeModule\Model\User' => 'User',
            // Aliasing a name to a known service name
            'AdminUser' => 'User',
            // Aliasing to an alias
            'SuperUser' => 'AdminUser',
        ),
        'factories' => array(
            // Keys are the service names.
            // Valid values include names of classes implementing 
            // FactoryInterface, instances of classes implementing 
            // FactoryInterface, or any PHP callbacks
            'User'     => 'SomeModule\Service\UserFactory',
            'UserForm' => function ($serviceManager) {
                $form = new SomeModule\Form\User();

                // Retrieve a dependency from the service manager and inject it!
                $form->setInputFilter($serviceManager->get('UserInputFilter'),
                return $form;
            },
        ),
        'invokables' => array(
            // Keys are the service names
            // Values are valid class names to instantiate.
            'UserInputFiler' => 'SomeModule\InputFilter\User',
        ),
        'services' => array(
            // Keys are the service names
            // Values are objects
            'Auth' => new SomeModule\Authentication\AuthenticationService(),
        ),
        'shared' => array(
            // Usually, you'll only indicate services that should _NOT_ be
            // shared -- i.e., ones where you want a different instance
            // every time.
            'UserForm' => false,
        ),
    ),
);
]]></programlisting>

            <note>
                <info><title>Configuration and PHP</title></info>

                <para>
                    Typically, you should not have your configuration files create new instances of
                    objects or even closures for factories; at the time of configuration, not all
                    autoloading may be in place, and if another configuration overwrites this one
                    later, you're now spending CPU and memory performing work that is ultimately
                    lost.
                </para>

                <para>
                    For instances that require factories, write a factory. If you'd like to inject
                    specific, configured instances, use the Module class to do so, or a listener.
                </para>
            </note>
        </example>

        <example xml:id="zend.service-manager.quick-start.examples.return-array">
            <info><title>Module returning an array</title></info>

            <para>
                The following demonstrates returning an array of configuration from a module class.
                It is substantively the same as the array configuration from the previous example.
            </para>

            <programlisting language="php"><![CDATA[
namespace SomeModule;

class Module
{
    public function getServiceConfiguration()
    {
        return array(
            'abstract_factories' => array(
                // Valid values include names of classes implementing 
                // AbstractFactoryInterface, instances of classes implementing 
                // AbstractFactoryInterface, or any PHP callbacks
                'SomeModule\Service\FallbackFactory',
            ),
            'aliases' => array(
                // Aliasing a FQCN to a service name
                'SomeModule\Model\User' => 'User',
                // Aliasing a name to a known service name
                'AdminUser' => 'User',
                // Aliasing to an alias
                'SuperUser' => 'AdminUser',
            ),
            'factories' => array(
                // Keys are the service names.
                // Valid values include names of classes implementing 
                // FactoryInterface, instances of classes implementing 
                // FactoryInterface, or any PHP callbacks
                'User'     => 'SomeModule\Service\UserFactory',
                'UserForm' => function ($serviceManager) {
                    // Note: we're already in the "SomeModule" namespace
                    $form = new Form\User();

                    // Retrieve a dependency from the service manager and inject it!
                    $form->setInputFilter($serviceManager->get('UserInputFilter'),
                    return $form;
                },
            ),
            'invokables' => array(
                // Keys are the service names
                // Values are valid class names to instantiate.
                'UserInputFiler' => 'SomeModule\InputFilter\User',
            ),
            'services' => array(
                // Keys are the service names
                // Values are objects
                // Note: we're already in the "SomeModule" namespace
                'Auth' => new Authentication\AuthenticationService(),
            ),
            'shared' => array(
                // Usually, you'll only indicate services that should _NOT_ be
                // shared -- i.e., ones where you want a different instance
                // every time.
                'UserForm' => false,
            ),
        );
    }
}
]]></programlisting>
        </example>

        <example xml:id="zend.service-manager.quick-start.examples.return-config-instance">
            <info><title>Returning a Configuration instance</title></info>

            <para>
                First, let's create a class that holds configuration.
            </para>

            <programlisting language="php"><![CDATA[
namespace SomeModule\Service;

use SomeModule\Authentication;
use SomeModule\Form;
use Zend\ServiceManager\Configuration;
use Zend\ServiceManager\ServiceManager;

class ServiceConfiguration extends Configuration
{
    /**
     * This is hard-coded for brevity.
     */
    public function configureServiceManager(ServiceManager $serviceManager)
    {
        $serviceManager->setFactory('User', 'SomeModule\Service\UserFactory');
        $serviceManager->setFactory('UserForm', function ($serviceManager) {
            $form = new Form\User();

            // Retrieve a dependency from the service manager and inject it!
            $form->setInputFilter($serviceManager->get('UserInputFilter'),
            return $form;
        });
        $serviceManager->setInvokableClass('UserInputFilter', 'SomeModule\InputFilter\User');
        $serviceManager->setService('Auth', new Authentication\AuthenticationService());
        $serviceManager->setAlias('SomeModule\Model\User', 'User');
        $serviceManager->setAlias('AdminUser', 'User');
        $serviceManager->setAlias('SuperUser', 'AdminUser');
        $serviceManager->setShared('UserForm', false);
    }
}
]]></programlisting>

            <para>
                Now, we'll consume it from our Module.
            </para>

            <programlisting language="php"><![CDATA[
namespace SomeModule;

// We could implement Zend\ModuleManager\Feature\ServiceProviderInterface.
// However, the module manager will still find the method without doing so.
class Module
{
    public function getServiceConfiguration()
    {
        return new Service\ServiceConfiguration();
        // OR:
        // return 'SomeModule\Service\ServiceConfiguration';
    }
}
]]></programlisting>
        </example>

        <example xml:id="zend.service-manager.quick-start.examples.service-manager-aware">
            <info><title>Creating a ServiceManager-aware class</title></info>

            <para>
                By default, the Zend Framework MVC registers an initializer that will inject the
                <classname>ServiceManager</classname> instance into any class implementing
                <classname>Zend\ServiceManager\ServiceManagerAwareInterface</classname>. The default
                controller implementations implement this interface, as do a small number of other
                objects. A simple implementation looks like the following.
            </para>

            <programlisting language="php"><![CDATA[
namespace SomeModule\Controller\BareController;

use Zend\ServiceManager\ServiceManager;
use Zend\ServiceManager\ServiceManagerAwareInterface;
use Zend\Stdlib\DispatchableInterface as Dispatchable;
use Zend\Stdlib\RequestInterface as Request;
use Zend\Stdlib\ResponseInterface as Response;

class BareController implements
    Dispatchable,
    ServiceManagerAwareInterface
{
    protected $services;

    public function setServiceManager(ServiceManager $serviceManager)
    {
        $this->services = $serviceManager;
    }

    public function dispatch(Request $request, Response $response = null)
    {
        // ...

        // Retrieve something from the service manager
        $router = $this->services->get('Router');

        // ...
    }
}
]]></programlisting>
        </example>
    </section>
</section>
