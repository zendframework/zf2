<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.captcha.operation"><title>Captcha Operation</title>
    

    <para>
        All <acronym>CAPTCHA</acronym> adapter implement
        <classname>Zend\Captcha\AdapterInterface</classname>, which looks like the following:
    </para>

    <programlisting language="php"><![CDATA[
namespace Zend\Captcha;

use Zend\Validator\ValidatorInterface;

interface AdapterInterface extends ValidatorInterface
{
    public function generate();

    public function setName($name);

    public function getName();

    // Get helper name used for rendering this captcha type
    public function getHelperName();
}
]]></programlisting>

    <para>
        The name setter and getter are used to specify and retrieve the
        <acronym>CAPTCHA</acronym> identifier. The most interesting methods are
        <methodname>generate()</methodname> and <methodname>render()</methodname>.
        <methodname>generate()</methodname> is used to create the <acronym>CAPTCHA</acronym>
        token. This process typically will store the token in the session so that you may compare
        against it in subsequent requests. <methodname>render()</methodname> is used to render the
        information that represents the <acronym>CAPTCHA</acronym>, be it an image, a figlet, a
        logic problem, or some other <acronym>CAPTCHA</acronym>.
    </para>

    <para>
        A simple use case might look like the following:
    </para>

    <programlisting language="php"><![CDATA[
// Originating request:
$captcha = new Zend\Captcha\Figlet(array(
    'name' => 'foo',
    'wordLen' => 6,
    'timeout' => 300,
));

$id = $captcha->generate();

//this will output a Figlet string
echo $captcha->getFiglet()->render($captcha->getWord());


// On a subsequent request:
// Assume a captcha setup as before, with corresponding form fields, the value of $_POST['foo']
// would be key/value array: id => captcha ID, input => captcha value
if ($captcha->isValid($_POST['foo'], $_POST)) {
    // Validated!
}
]]></programlisting>

    <note>
        <para>
            Under most circumstances, you probably prefer the use of <classname>Zend\Captcha</classname> functionality
            combined with the power of the <classname>Zend\Form</classname> component. For an example on how to use
            <classname>Zend\Form\Element\Captcha</classname>, have a look at the
            <link linkend="zend.form.quick-start">Zend\Form Quick Start</link>.
        </para>
    </note>

</section>
