<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.module-manager.module-class">
    
        <title>The Module Class</title>
    

    <para>
        By default, ZF2 module system simply expects each module name to be able to be resolved to
        an object instance. The default module resolver,
        <classname>Zend\ModuleManager\Listener\ModuleResolverListener</classname>, simply
        instantiates an instance of <classname>{moduleName}\Module</classname> for each enabled
        module.
    </para>

    <example xml:id="zend.module-manager.module-class.example.minimal-module">
        
            <title>A Minimal Module</title>
        

        <para>
            As an example, provided the module name "MyModule",
            <classname>Zend\ModuleManager\Listener\ModuleResolverListener</classname> will simply expect
            the class <classname>MyModule\Module</classname> to be available. It relies on a
            registered autoloader, (typically <classname
                xlink:href="zend.module-manager.module-autoloader">Zend\Loader\ModuleAutoloader</classname>)
            to find and include the <classname>MyModule\Module</classname> class if it is not
            already available. 
        </para>

        <para>
            A module named "MyModule" module might start out looking something like this:
        </para>
 
        <literallayout>
MyModule/
    Module.php
</literallayout>

        <para>
            Within <filename>Module.php</filename>, you define your
            <classname>MyModule\Module</classname> class:
        </para>

        <programlisting language="php"><![CDATA[
namespace MyModule;

class Module
{
}
]]></programlisting>
        <para>
            Though it will not serve any purpose at this point, this "MyModule" module now has
            everything it needs to be considered a valid module and be loaded by the module system!
        </para>
    </example>

    <para>
        This <classname>Module</classname> class serves as the single entry point for module manager
        listeners to interact with a module.  From within this simple, yet powerful class, modules
        can override or provide additional application configuration, perform initialization tasks
        such as registering autoloader(s) and event listeners, declaring dependencies, and much
        more.
    </para>

    <example xml:id="zend.module-manager.module-class.example.typical-module-class">
        
            <title>A Typical Module Class</title>
        

        <para>
            The following example shows a more typical usage of the <classname>Module</classname>
            class:
        </para>

        <programlisting language="php"><![CDATA[
namespace MyModule;

class Module
{
    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\ClassMapAutoloader' => array(
                __DIR__ . '/autoload_classmap.php',
            ),
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }

    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
]]></programlisting>
    </example>    

    <para>
        For a list of the provided module manager listeners and the interfaces and methods that
        <classname>Module</classname> classes may implement in order to interact with the module
        manager and application, see the <link
            linkend="zend.module-manager.module-manager.module-manager-listeners">module manager listeners
            documentation</link> and the <link
            linkend="zend.module-manager.module-manager.module-manager-events">module mananger events
            documentation</link>.
    </para>

    <section xml:id="zend.module-manager.module-class.the-loadModules.post-event">
        
            <title>The "loadModules.post" Event</title>
        

        <para>
            It is not safe for a module to assume that any other modules have already been loaded at
            the time <methodname>init()</methodname> method is called. If your module needs to
            perform any actions after all other modules have been loaded, the module manager's
            "loadModules.post" event makes this easy. 
        </para>

        <note>
            <para>
                For more information on methods like <methodname>init()</methodname> and
                <methodname>getConfig()</methodname>, refer to the <link
                    linkend="zend.module-manager.module-manager.module-manager-listeners">module manager
                    listeners documentation</link>.
            </para>
        </note>

        <example xml:id="zend.module-manager.module-class.example.loadModules.post-event">
            
                <title>Sample Usage of "loadModules.post" Event</title>
            

            <programlisting language="php"><![CDATA[
use Zend\EventManager\EventInterface as Event;
use Zend\ModuleManager\ModuleManager;

class Module
{
    public function init(ModuleManager $moduleManger)
    {
        // Remember to keep the init() method as lightweight as possible
        $events = $moduleManager->getEventManager();
        $events->attach('loadModules.post', array($this, 'modulesLoaded'));
    }

    public function modulesLoaded(Event $e)
    {
        // This method is called once all modules are loaded.
        $moduleManager = $e->getTarget();
        $loadedModules = $moduleManager->getLoadedModules();
        $config        = $moduleManager->getConfig();
    }
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.module-manager.module-class.the-mvc-bootstrap-event">
        
            <title>The MVC "bootstrap" Event</title>
        

        <para>
            If you are writing an MVC-oriented module for ZF2, you may need access to additional
            parts of the application in your <classname>Module</classname> class such as the
            instance of <classname>Zend\Mvc\Application</classname> or its registered service
            manager instance. For this, you may utilize the MVC "bootstrap" event. The bootstrap
            event is triggered after the "loadModule.post" event, once
            <code>$application->bootstrap()</code> is called.
        </para>

        <example xml:id="zend.module-manager.module-class.example.mvc-bootstrap-event">
            
                <title>Sample Usage of the MVC "bootstrap" Event</title>
            

            <programlisting language="php"><![CDATA[
use Zend\EventManager\EventInterface as Event;

class Module
{
    public function onBootstrap(Event $e)
    {
        // This method is called once the MVC bootstrapping is complete
        $application = $e->getApplication();
        $services    = $application->getServiceManager();
    }
}
]]></programlisting>
        </example>
    </section>
</section>
