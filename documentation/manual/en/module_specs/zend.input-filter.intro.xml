<?xml version="1.0" encoding="utf-8"?>
<section 
    xmlns="http://docbook.org/ns/docbook"
    version="5.0"
    xml:id="zend.input-filter.intro">
    <title>Introduction</title>

    <para>
        The <classname>Zend\InputFilter</classname> component can be used to filter and validate
        generic sets of input data.  For instance, you could use it to filter
        <varname>$_GET</varname> or <varname>$_POST</varname>
        values, CLI arguments, etc.
    </para>

    <para>
        To pass input data to the <classname>InputFilter</classname>, you can use the
        <methodname>setData()</methodname> method.  The data must be specified using an associative
        array. Below is an example on how to validate the data coming from a form using the
        <acronym>POST</acronym> method.
    </para>

    <programlisting language="php"><![CDATA[
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Input;
use Zend\Validator;

$email = new Input('email');
$email->getValidatorChain()
      ->addValidator(new Validator\EmailAddress());

$password = new Input('password');
$password->getValidatorChain()
         ->addValidator(new Validator\StringLength(8));

$inputFilter = new InputFilter();
$inputFilter->add($email)
            ->add($password)
            ->setData($_POST);

if ($inputFilter->isValid()) {
    echo "The form is valid\n";
} else {
    echo "The form is not valid\n";
    foreach ($inputFilter->getInvalidInput() as $error) {
        print_r ($error->getMessages());
    }
}
]]></programlisting>

    <para>
        In this example we validated the email and password values. The email must be a valid address
        and the password must be composed with at least 8 characters. If the input data are not
        valid, we report the list of invalid input using the
        <methodname>getInvalidInput()</methodname> method.
    </para>

    <para>
        You can add one or more validators to each input using the
        <methodname>addValidator()</methodname> method for each validator.  It is also possible to
        specify a "validation group", a subset of the data to be validated; this may be done using
        the <methodname>setValidationGroup()</methodname> method. You can specify the list of the
        input names as an array or as individual parameters.
    </para>

    <programlisting language="php"><![CDATA[
// As individual parameters
$filterInput->setValidationGroup('email', 'password');

// or as an array of names
$filterInput->setValidationGroup(array('email', 'password'));
]]></programlisting>

    <para>
        You can validate and/or filter the data using the <classname>InputFilter</classname>. To
        filter data, use the <methodname>getFilterChain()</methodname> method of individual
        <classname>Input</classname> instances, and attach filters to the returned filter chain.
        Below is an example that uses filtering without validation.
    </para>

    <programlisting language="php"><![CDATA[
use Zend\InputFilter\Input;
use Zend\InputFilter\InputFilter;

$input = new Input('foo');
$input->getFilterChain()
      ->attachByName('stringtrim')
      ->attachByName('alpha');

$inputfilter = new InputFilter();
$inputfilter->add($input, 'foo')
            ->setData(array(
                'foo' => ' Bar3 ';
            ));

echo "Before:\n";
echo $inputFilter->getRawValue('foo') . "\n"; // the output is ' Bar3 '
echo "After:\n";
echo $inputFilter->getValue('foo') . "\n"; // the output is 'Bar'
]]></programlisting>

    <para>
        The <methodname>getValue()</methodname> method returns the filtered value of the 'foo'
        input, while <methodname>getRawValue()</methodname> returns the original value of the input.
    </para>

    <para>
        We provide also <classname>Zend\InputFilter\Factory</classname>, to allow initialization of
        the <classname>InputFilter</classname> based on a configuration array (or
        <classname>Traversable</classname> object). Below is an example where we create a password
        input value with the same constraints proposed before (a string with at least 8 characters):
    </para>

    <programlisting language="php"><![CDATA[
use Zend\InputFilter\Factory;

$factory = new Factory();
$inputFilter = $factory->createInputFilter(array(
    'password' => array(
        'name'       => 'password',
        'required'   => true,
        'validators' => array(
            array(
                'name' => 'not_empty',
            ),
            array(
                'name' => 'string_length',
                'options' => array(
                    'min' => 8
                ),
            ),
        ),
    ),
));

$inputFilter->setData($_POST);
echo $inputFilter->isValid() ? "Valid form" : "Invalid form";
]]></programlisting>

    <para>
        The factory may be used to create not only <classname>Input</classname> instances, but also
        nested <classname>InputFilter</classname>s, allowing you to create validation and filtering
        rules for hierarchical data sets.
    </para>

    <para>
        Finally, the default <class>InputFilter</class> implementation is backed by a
        <classname>Factory</classname>. This means that when calling <methodname>add()</methodname>,
        you can provide a specification that the <classname>Factory</classname> would understand,
        and it will create the appropriate object. You may create either
        <classname>Input</classname> or <classname>InputFilter</classname> objects in this fashion.
    </para>

    <programlisting language="php"><![CDATA[
use Zend\InputFilter\InputFilter;

$filter = new InputFilter();

// Adding a single input
$filter->add(array(
    'name' => 'password',
    'required' => true,
    'validators' => array(
        array(
            'name' => 'not_empty',
        ),
        array(
            'name' => 'string_length',
            'options' => array(
                'min' => 8
            ),
        ),
    ),
));

// Adding an input filter composing a single input to the current filter
$filter->add(array(
    'type' => 'Zend\Filter\InputFilter',
    'password' => array(
        'name' => 'password',
        'required' => true,
        'validators' => array(
            array(
                'name' => 'not_empty',
            ),
            array(
                'name' => 'string_length',
                'options' => array(
                    'min' => 8
                ),
            ),
        ),
    ),
));
]]></programlisting>
</section>
