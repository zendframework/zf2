<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.mvc.quick-start">
  <info><title>Quick Start</title></info>

  <para>
    Ora che conosci le basi di come le applicazioni ed i moduli
    sono strutturati, vedremo il modo più semplice per iniziare.
  </para>

  <section xml:id="zend.mvc.quick-start.install">
    <info><title>Installare la  Zend Skeleton Application</title></info>

    <para>
      Il modo più semplice per cominciare consiste nello scaricare l'applicazione
      di esempio ed i moduli. Per fare questo dobbiamo seguire i 
      seguenti passi.
    </para>

    <section xml:id="zend.mvc.quick-start.install.using-git">
      <info><title>Utilizzare Git</title></info>

      <para>
        Semplicemente cloniamo il repository 
        <classname>ZendSkeletonApplication</classname>, utilizziamo la
        opzione <varname>--recursive</varname> che automaticamente
        prende anche ZF.
      </para>

      <programlisting language="php"><![CDATA[
prompt> git clone --recursive git://github.com/zendframework/ZendSkeletonApplication.git my-application
]]></programlisting>
    </section>

    <section xml:id="zend.mvc.quick-start.install.manual-installation">
      <info><title>Manuale di installazione</title></info>

      <itemizedlist>
        <listitem>
          <para>
              Scarica il tarball del repository <classname>ZendSkeletonApplication</classname>:
          </para>

          <itemizedlist>
            <listitem>
              <para>
                  Zip: <link xlink:href="https://github.com/zendframework/ZendSkeletonApplication/zipball/master">https://github.com/zendframework/ZendSkeletonApplication/zipball/master</link>
              </para>
            </listitem>

            <listitem>
              <para>
                Tarball: <link xlink:href="https://github.com/zendframework/ZendSkeletonApplication/tarball/master">https://github.com/zendframework/ZendSkeletonApplication/tarball/master</link>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            Decomprimi l'archivio che hai selezionato e rinomina la directory
            dandole il nome del tuo progetto; noi utilizzeremo
            "my-application" in tutto il documento.
          </para>
        </listitem>

        <listitem>
          <para>
            Installa Zend Framework, e se si ha la libreria nel proprio 
            <varname>include_path</varname>, crea un link simbolico nella
            cartella "library", oppure installala direttamente nella tua
            applicazione utilizzando Pyrus.
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-new-module">
    <info><title>Crea un nuovo modulo</title></info>

    <para>
      Di default, un modulo è incluso nella <classname>ZendSketonApplication</classname>,
      chiamato "Application". Questo contiene:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Un "view listener" che esegue il render delle viste basate
          sul controller in uso e le inietta dentro il layout del sito.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      È necessario modificare questi altri file qualora si volesse alterare
      la home page del tuo sito e/o la pagina di errore.
    </para>

    <para>
      Nuove funzionalità possono essere aggiunte creando nuovi moduli.
    </para>

    <para>
      Per iniziare a sviluppare moduli raccomandiamo di utilizzare la
      <classname>ZendSkeletonModule</classname> come base. Scaricala da 
      qui:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Zip: <link xlink:href="https://github.com/zendframework/ZendSkeletonModule/zipball/master">https://github.com/zendframework/ZendSkeletonModule/zipball/master</link>
        </para>
      </listitem>

      <listitem>
        <para>
          Tarball: <link xlink:href="https://github.com/zendframework/ZendSkeletonModule/tarball/master">https://github.com/zendframework/ZendSkeletonModule/tarball/master</link>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Decomprimi il pacchetto e rinomina la directory "ZendSkeletonModule"
      per riflettere il nome del module che vuoi creare; quando hai finito, muovi
      il module dentro il tuo nuovo progetto nella directory <filename>modules/</filename>.
    </para>

    <para>
      A questo punto è possibile di creare qualche funzionalità.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.update-the-module-class">
    <info><title>Aggiorare la classe Module</title></info>

    <para>
      Semplicemente aggiornare la classe Module. Faremo attenzione
      che il namespace sia corretto, che la configurazione sia abilitata e
      restituita e imposteremo l'autoloading  sull'inizializzazione.
      Finchè siamo attivamente al lavoro su questo modulo la lista
      delle classi sarà in continuo movimento e quindi dobbiamo
      essere particolarmente flessibili sulla nostra strategia di 
      autoloading, utilizziamo <classname>StandardAutoloader</classname>.
      Per cominciare.
    </para>

    <para>
      Prima di tutto lasciamo che <filename>autoload_classmap.php</filename>
      ritorni un array vuoto:
    </para>

    <programlisting language="php"><![CDATA[
<?php
// autoload_classmap.php
return array();
]]></programlisting>

    <para>
      Modificheremo anche il nostro <filename>config/module.config.php</filename> 
      come segue:
    </para>

    <programlisting language="php"><![CDATA[
return array(
    'view_manager' => array(
        'template_path_stack' => array(
            '<module-name>' => __DIR__ . '/../view'
        ),
    ),
);
]]></programlisting>

    <para>
      Al posto di "module-name" metti con solo caratteri minuscoli,
      separati dal trattino, il nome del tuo modulo -- esempio
      "ZendUser" diventerebbe "zend-user".
    </para>

    <para>
      Dopo di che modifica il file <filename>Module.php</filename>
      come segue:
    </para>

    <programlisting language="php"><![CDATA[
namespace <your module name here>;

use Zend\Module\Consumer\AutoloaderProvider;

class Module implements AutoloaderProvider
{
    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\ClassMapAutoloader' => array(
                __DIR__ . '/autoload_classmap.php',
            ),
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }

    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
]]></programlisting>

    <para>
      A questo punto hai il tuo "module" correttamente modificato. Ora passiamo
      al controller!
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-controller">
    <info><title>Create un Controller</title></info>

    <para>
      I controller sono semplici oggetti che implementano 
      <classname>Zend\Stdlib\Dispatchable</classname>. Questo significa
      se semplicemente devi implementare un <methodname>dispatch()</methodname>
      che prende un oggetto <classname>Response</classname> come argomento.
    </para>

    <para>
      In pratica questo significherebbe scrivere la logica da gestire
      basata su una regola di routing per ogni controller. Abbiamo creato
      due controller base su cui tu puoi cominciare:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <classname>Zend\Mvc\Controller\ActionController</classname> permette
          il "match" di una "route" con un'azione. Quando si verifica un "match"
          un metodo verrà chiamato dal controller. Per esempio se hai una "route"
          che restituisce "foo" per l'azione, il metodo "fooAction" sarà quello
          invocato.
        </para>
      </listitem>

      <listitem>
        <para>
          <classname>Zend\Mvc\Controller\RestfulController</classname>
          analizza la Request per determinare quale metodo HTTP è stato utilizzato
          e chiama un metodo appropriato sulla base di questa analisi.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <varname>GET</varname> chiamerà il metodo
              <methodname>getList()</methodname> , oppure, se viene scoperto un "id"
              durante il match di routing, il metodo <methodname>get()</methodname> (
              l'identificatore passato come unico parametro).
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>POST</varname> chiamerà un metodo <methodname>create()</methodname>
              passando <varname>$_POST</varname> al primo parametro.
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>PUT</varname> si aspetta un "id" da confrontare
              durante il routing, chiamerà il metodo <methodname>update()</methodname>
              passando l'identificatore, e qualunque informazione trovata
              nel body della richiesta.
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>DELETE</varname> si aspetta un "id" che deve essere 
              confrontato durante la fase di routing e chiamerà il metodo 
              <methodname>delete()</methodname>.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>
      Per iniziare creeremo un controller in stile "hello world"
      con una singola azione. Iniziamo creando la directory
      <filename>src/&lt;module name&gt;/Controller/</filename> e
      creiamo il file <filename>HelloController.php</filename> al
      suo interno. Modifica il
      suo contenuto:
    </para>

    <programlisting language="php"><![CDATA[
<?php
namespace <module name>\Controller;

use Zend\Mvc\Controller\ActionController;
use Zend\View\Model\ViewModel;

class HelloController extends ActionController
{
    public function worldAction()
    {
        $request = $this->getRequest();
        $message = $request->query()->get('message', 'foo');
        return new ViewModel(array('message' => $message));
    }
}
]]></programlisting>

    <para>
      Bene, cosa stiamo facendo qui?
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Stiamo creando un action controller.
        </para>
      </listitem>

      <listitem>
        <para>
          Stiamo definendo un azione "world".
        </para>
      </listitem>

      <listitem>
        <para>
          Stiamo realizzando un messaggio utilizzando i parametri 
          (si è assolutamente una pessima idea in ambiente di produzione!).
        </para>
      </listitem>

      <listitem>
        <para>
          Ritorniamo un array di valori che andreamo a processare dopo.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Stiamo ritornando un <classname>ViewModel</classname>. Lo strato della
      vista utilizzerà tale oggetto per visualizarla produrre un output tramite il template e le variabili assegnategli.
      Di default puoi omettere il nome del template e la logica delle viste risolverà
      in automatico da "lowercase-controller-name/lowercase-action-name". Comunque
      puoi sovrascrivere questa specifica con qualcosa di differente
      chiamando <methodname>setTemplate()</methodname> sulla instanza del
      <classname>ViewModel</classname>. Tipicamnte, i template sono file con
      estensione ".phtml" nella cartella <filename>views</filename> del tuo
      modulo.
    </para>

    <para>
      Bene, con questi concetti, creiamo la prima vista.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-view-script">
    <info><title>Creare una vista</title></info>

    <para>
      Crea la cartella <filename>view/&lt;module-name&gt;hello</filename>.
      Dentro questa directory , creiamo il file chiamato 
      <filename>world.phtml</filename>. Dentro questo scriviamo il seguente codice
      quanto segue:
    </para>

    <programlisting language="php"><![CDATA[
<h1>Greetings!</h1>

<p>You said "<?php echo $this->escape($message) ?>".</p>
]]></programlisting>

    <para>
      Questo è tutto. Salviamo il file.
    </para>

    <note>
      <para>
        Che cosa è il metodo <methodname>escape()</methodname>? 
        Attualmente è un <link linkend="zend.view.helpers">view helper</link>,
        ed è disegnato per aiutarti a mitigare gli attacchi <acronym>XSS</acronym>.
        Mai fidarsi dell'input degli utenti, se non sei sicuro della sorgente
        di una variabile della tua vista, usa l'escaping.
      </para>
    </note>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-route">
    <info><title>Creare una "route"</title></info>

    <para>
      Ora abbiamo un controller ed una vista, dobbiamo creare una "route"
      per queste.
    </para>

    <note>
      <para>
        <classname>ZendSkeletonApplication</classname> include una
        "route di base" che ti porta su questa azione. Questa "route"
        si compone come "/{controller}/{action}", che ti permette di
        specificare: "/zend-user-hello/world". Ora andremo a creare un
        strada solo per scopi illustrativi, creare "route" esplicite
        è una pratica raccomandata.
        L'applicazione cerca un'istanza
        <classname>Zend\Mvc\Router\RouteStack</classname> per configurare
        il "routing".Il router creato di default è
        <classname>Zend\Mvc\Router\Http\TreeRouteStack</classname>.
      </para>
    </note>
    
    <para>
        In aggiunta dobbiamo informare l'applicazione che riguardo il controller 
        a noi creato.
    </para>
    
    <para>
      Apri il file <filename>configs/module.config.php</filename> e
      modificalo per aggiungere alle "routes" un array che sia come
      questo:
    </para>

    <programlisting language="php"><![CDATA[
return array(
    'routes' => array(
        '<module name>-hello-world' => array(
            'type'    => `Zend\Mvc\Router\Http\Literal`,
            'options' => array(
                'route' => '/hello/world',
                'defaults' => array(
                    'controller' => '<module name>-hello',
                    'action'     => 'world',
                ),
            ),
        ),
    ),
    // ... di configuration ...
);
]]></programlisting>

    <para>
      Come prima, <varname>&lt;module-name&gt;</varname> deve essere
      modificato con la versione in caratteri minuscoli e separato
      da trattini.
    </para>

    <para>
      Ora abbiamo una "route" per il nostro controller. Comunque, come
      può sapere quale controller andare ad eseguire?
      <varname>&lt;module name&gt;-hello</varname> è descrittivo ma non
      è il nome della classe. Ciò avviene tramite un cosiddetto `alias` che viene assegnato al controller.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.tell-the-application-about-our-module">
    <info><title>Informare l'applicazione del tuo modulo</title></info>

    <para>
      Fin'ora non abbiamo mai spiegato alla nostra applicazione che è stato
      aggiunto un nuovo modulo!
    </para>

    <para>
      Di default i moduli non sono analizzati finchè non viene detto
      a Zend\ModuleManager di farlo. Quindi dobbiamo notificare
      l'applicazione dell'esistenza del nostro modulo.
    </para>

    <para>
      Ricordi il file <filename>config/application.config.php</filename>?
      Modificalo aggiungendo il modulo. Una volta applicate le modifiche,
      il file dovrebbe apparire come segue:
    </para>

    <programlisting language="php"><![CDATA[
<?php
return array(
    'modules' => array(
        'Application',
        '<module namespace>',
    ),
    'module_listener_options' => array( 
        'module_paths' => array(
            './module',
            './vendor',
        ),
    ),
);
]]></programlisting>

    <para>
      Rimpiazza <varname>&lt;module namespace&gt;</varname> con il
      namespace del tuo modulo.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.test-it-out">
    <info><title>Provalo!</title></info>

    <para>
      Siamo pronti per provare il tutto! Crea un nuovo "vhost" puntando
      la "document root" alla cartella <filename>public</filename>
      della tua applicazione e attiva il tuo browser. Dovresti vedere
      una semplice pagina come questa:
    </para>

    <programlisting language="php"><![CDATA[
Module:     Application
Controller: Index
Action:     index
]]></programlisting>

    <para>
      Ora ricarica l'URL appendendo il percorso "hello/world" all'indirizzo della pagina
      la pagina. Dovresti vedere il seguente contenuto:
    </para>

    <programlisting language="html"><![CDATA[
<h1>Greetings!</h1>

<p>You said "foo".</p>
]]></programlisting>

    <para>
      Ora modifica ancora l'indirizzo aggiungendo "?message=bar"
      e ricarica la pagina. Dovresti ottenere:
    </para>

    <programlisting language="html"><![CDATA[
<h1>Greetings!</h1>

<p>You said "bar".</p>
]]></programlisting>

    <para>
      Congratulazioni! Hai appena creato il tuo primo modulo
      ZF2!
    </para>
  </section>
</section>
